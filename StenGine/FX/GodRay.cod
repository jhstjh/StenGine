//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerFrame
{
    float3  gLightPosH;                 // Offset:    0, size:   12
}

//
// 3 local object(s)
//
Texture2D gOcclusionMap;
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    BorderColor = float4(0, 0, 0, 0);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
};
BlendState SrcAlphaBlendingAdd
{
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 t0
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vertexId; 
                //   o1.x <- <VSmain return value>.Tex.x; o1.y <- <VSmain return value>.Tex.y; 
                //   o0.x <- <VSmain return value>.pos.x; o0.y <- <VSmain return value>.pos.y; o0.z <- <VSmain return value>.pos.z; o0.w <- <VSmain return value>.pos.w
                //
                #line 26 "E:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\GodRay.fx"
                if_z v0.x
                  mov r0.xyzw, l(-1.000000,-1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                  itof r1.xy, l(0, 1, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                else 
                
                #line 26
                  mov r1.z, v0.x  // r1.z <- vertexId
                
                #line 30
                  mov r1.w, l(1)
                  ieq r1.w, r1.w, r1.z
                  if_nz r1.w
                    mov r0.xyzw, l(-1.000000,1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                    itof r1.xy, l(0, 0, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                  else 
                    mov r1.w, l(2)
                    ieq r1.w, r1.w, r1.z
                    if_nz r1.w
                      mov r0.xyzw, l(1.000000,1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                      itof r1.xy, l(1, 0, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                    else 
                      mov r1.w, l(3)
                      ieq r1.w, r1.w, r1.z
                      if_nz r1.w
                        mov r0.xyzw, l(1.000000,1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                        itof r1.xy, l(1, 0, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                
                #line 41
                      else 
                        mov r1.w, l(4)
                        ieq r1.w, r1.w, r1.z
                        if_nz r1.w
                          mov r0.xyzw, l(1.000000,-1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                          itof r1.xy, l(1, 1, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                        else 
                          mov r1.w, l(5)
                          ieq r1.z, r1.w, r1.z
                          if_nz r1.z
                            mov r0.xyzw, l(-1.000000,-1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                            itof r1.xy, l(0, 1, 0, 0)
                          endif   // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                        endif 
                      endif 
                    endif 
                  endif 
                endif 
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 43 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gLightPosH;                 // Offset:    0 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gOcclusionMap                     texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.pos.x; v0.y <- input.pos.y; v0.z <- input.pos.z; v0.w <- input.pos.w; 
                //   v1.x <- input.Tex.x; v1.y <- input.Tex.y; 
                //   o0.x <- <PSmain return value>.x; o0.y <- <PSmain return value>.y; o0.z <- <PSmain return value>.z; o0.w <- <PSmain return value>.w
                //
                #line 62 "E:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\GodRay.fx"
                mov r0.x, l(200)  // r0.x <- NUM_SAMPLES
                
                #line 66
                itof r0.y, l(1)
                mov r0.z, -cb0[0].z
                add r0.y, r0.z, r0.y
                lt r0.y, r0.y, l(0.000000)
                and r0.y, r0.y, l(-1)
                discard_nz r0.y
                itof r0.y, l(1)  // r0.y <- Density
                mov r0.z, l(0.900000)  // r0.z <- Decay
                mov r0.w, l(0.200000)  // r0.w <- Exposure
                
                #line 74
                mov r1.xy, v1.xyxx  // r1.x <- texCoord.x; r1.y <- texCoord.y
                
                #line 79
                mov r1.zw, -cb0[0].xxxy
                add r1.zw, r1.zzzw, r1.xxxy  // r1.z <- deltaTexCoord.x; r1.w <- deltaTexCoord.y
                mov r2.x, l(-0.500000)
                add r2.x, r2.x, cb0[0].x
                mov r2.y, -r2.x
                max r2.x, r2.y, r2.x
                itof r2.y, l(0)
                max r2.x, r2.y, r2.x
                min r2.x, r2.x, l(0.500000)
                mov r2.x, -r2.x
                add r2.x, r2.x, l(0.500000)  // r2.x <- Weight
                
                #line 84
                mul r0.y, r0.y, l(0.005000)
                mul r1.zw, r0.yyyy, r1.zzzw
                itof r0.y, l(0)  // r0.y <- color
                
                #line 92
                mov r2.y, l(1.000000)  // r2.y <- illuminationDecay
                mov r2.z, l(0)  // r2.z <- i
                mov r3.xy, r1.xyxx  // r3.x <- texCoord.x; r3.y <- texCoord.y
                mov r2.w, r0.y  // r2.w <- color
                mov r3.z, r2.y  // r3.z <- illuminationDecay
                mov r3.w, r2.z  // r3.w <- i
                loop 
                  ilt r4.x, r3.w, r0.x
                  breakc_z r4.x
                
                #line 97
                  mov r4.xy, r1.zwzz
                  mov r4.xy, -r4.xyxx
                  add r3.xy, r3.xyxx, r4.xyxx
                  sample_indexable(texture2d)(float,float,float,float) r4.x, r3.xyxx, t0.xyzw, s0
                  itof r4.y, l(0)
                  eq r4.x, r4.y, r4.x
                  movc r4.x, r4.x, l(1), l(0)
                  itof r4.x, r4.x  // r4.x <- sample
                  mul r4.y, r2.x, r3.z
                  mul r4.x, r4.y, r4.x
                  add r2.w, r2.w, r4.x
                  mul r3.z, r0.z, r3.z
                  iadd r3.w, r3.w, l(1)
                endloop 
                
                #line 109
                mul o0.x, r0.w, r2.w
                mul o0.y, r0.w, r2.w
                mul o0.z, r0.w, r2.w
                itof r0.x, l(1)
                sample_indexable(texture2d)(float,float,float,float) r0.y, r3.xyxx, t0.yxzw, s0
                mov r0.y, -r0.y
                add r0.x, r0.y, r0.x
                itof r0.y, l(0)
                eq r0.x, r0.y, r0.x
                movc r0.x, r0.x, l(0), l(1)
                itof r0.x, r0.x
                mul o0.w, r0.x, l(0.500000)
                ret 
                // Approximately 61 instruction slots used
                            
            };
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = SrcAlphaBlendingAdd;
        }

    }

    technique11 DeferredLightingTech
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vertexId; 
                //   o1.x <- <VSmain return value>.Tex.x; o1.y <- <VSmain return value>.Tex.y; 
                //   o0.x <- <VSmain return value>.pos.x; o0.y <- <VSmain return value>.pos.y; o0.z <- <VSmain return value>.pos.z; o0.w <- <VSmain return value>.pos.w
                //
                #line 26 "E:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\GodRay.fx"
                if_z v0.x
                  mov r0.xyzw, l(-1.000000,-1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                  itof r1.xy, l(0, 1, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                else 
                
                #line 26
                  mov r1.z, v0.x  // r1.z <- vertexId
                
                #line 30
                  mov r1.w, l(1)
                  ieq r1.w, r1.w, r1.z
                  if_nz r1.w
                    mov r0.xyzw, l(-1.000000,1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                    itof r1.xy, l(0, 0, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                  else 
                    mov r1.w, l(2)
                    ieq r1.w, r1.w, r1.z
                    if_nz r1.w
                      mov r0.xyzw, l(1.000000,1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                      itof r1.xy, l(1, 0, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                    else 
                      mov r1.w, l(3)
                      ieq r1.w, r1.w, r1.z
                      if_nz r1.w
                        mov r0.xyzw, l(1.000000,1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                        itof r1.xy, l(1, 0, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                
                #line 41
                      else 
                        mov r1.w, l(4)
                        ieq r1.w, r1.w, r1.z
                        if_nz r1.w
                          mov r0.xyzw, l(1.000000,-1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                          itof r1.xy, l(1, 1, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                        else 
                          mov r1.w, l(5)
                          ieq r1.z, r1.w, r1.z
                          if_nz r1.z
                            mov r0.xyzw, l(-1.000000,-1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                            itof r1.xy, l(0, 1, 0, 0)
                          endif   // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                        endif 
                      endif 
                    endif 
                  endif 
                endif 
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 43 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gLightPosH;                 // Offset:    0 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gOcclusionMap                     texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.pos.x; v0.y <- input.pos.y; v0.z <- input.pos.z; v0.w <- input.pos.w; 
                //   v1.x <- input.Tex.x; v1.y <- input.Tex.y; 
                //   o0.x <- <PSmain return value>.x; o0.y <- <PSmain return value>.y; o0.z <- <PSmain return value>.z; o0.w <- <PSmain return value>.w
                //
                #line 62 "E:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\GodRay.fx"
                mov r0.x, l(200)  // r0.x <- NUM_SAMPLES
                
                #line 66
                itof r0.y, l(1)
                mov r0.z, -cb0[0].z
                add r0.y, r0.z, r0.y
                lt r0.y, r0.y, l(0.000000)
                and r0.y, r0.y, l(-1)
                discard_nz r0.y
                itof r0.y, l(1)  // r0.y <- Density
                mov r0.z, l(0.900000)  // r0.z <- Decay
                mov r0.w, l(0.200000)  // r0.w <- Exposure
                
                #line 74
                mov r1.xy, v1.xyxx  // r1.x <- texCoord.x; r1.y <- texCoord.y
                
                #line 79
                mov r1.zw, -cb0[0].xxxy
                add r1.zw, r1.zzzw, r1.xxxy  // r1.z <- deltaTexCoord.x; r1.w <- deltaTexCoord.y
                mov r2.x, l(-0.500000)
                add r2.x, r2.x, cb0[0].x
                mov r2.y, -r2.x
                max r2.x, r2.y, r2.x
                itof r2.y, l(0)
                max r2.x, r2.y, r2.x
                min r2.x, r2.x, l(0.500000)
                mov r2.x, -r2.x
                add r2.x, r2.x, l(0.500000)  // r2.x <- Weight
                
                #line 84
                mul r0.y, r0.y, l(0.005000)
                mul r1.zw, r0.yyyy, r1.zzzw
                itof r0.y, l(0)  // r0.y <- color
                
                #line 92
                mov r2.y, l(1.000000)  // r2.y <- illuminationDecay
                mov r2.z, l(0)  // r2.z <- i
                mov r3.xy, r1.xyxx  // r3.x <- texCoord.x; r3.y <- texCoord.y
                mov r2.w, r0.y  // r2.w <- color
                mov r3.z, r2.y  // r3.z <- illuminationDecay
                mov r3.w, r2.z  // r3.w <- i
                loop 
                  ilt r4.x, r3.w, r0.x
                  breakc_z r4.x
                
                #line 97
                  mov r4.xy, r1.zwzz
                  mov r4.xy, -r4.xyxx
                  add r3.xy, r3.xyxx, r4.xyxx
                  sample_indexable(texture2d)(float,float,float,float) r4.x, r3.xyxx, t0.xyzw, s0
                  itof r4.y, l(0)
                  eq r4.x, r4.y, r4.x
                  movc r4.x, r4.x, l(1), l(0)
                  itof r4.x, r4.x  // r4.x <- sample
                  mul r4.y, r2.x, r3.z
                  mul r4.x, r4.y, r4.x
                  add r2.w, r2.w, r4.x
                  mul r3.z, r0.z, r3.z
                  iadd r3.w, r3.w, l(1)
                endloop 
                
                #line 109
                mul o0.x, r0.w, r2.w
                mul o0.y, r0.w, r2.w
                mul o0.z, r0.w, r2.w
                itof r0.x, l(1)
                sample_indexable(texture2d)(float,float,float,float) r0.y, r3.xyxx, t0.yxzw, s0
                mov r0.y, -r0.y
                add r0.x, r0.y, r0.x
                itof r0.y, l(0)
                eq r0.x, r0.y, r0.x
                movc r0.x, r0.x, l(0), l(1)
                itof r0.x, r0.x
                mul o0.w, r0.x, l(0.500000)
                ret 
                // Approximately 61 instruction slots used
                            
            };
        }

    }

}

