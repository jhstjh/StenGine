//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerObject
{
    float4x4 gWorldViewProj;            // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gWorld;                    // Offset:  128, size:   64
    Material gMaterial;                 // Offset:  192, size:   48
    float4x4 gShadowTransform;          // Offset:  240, size:   64
}

cbuffer cbPerFrame
{
    float3  gEyePosW;                   // Offset:    0, size:   12
}

//
// 4 local object(s)
//
Texture2D gDiffuseMap;
Texture2D gShadowMap;
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerComparisonState samShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS /* 2 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 DeferredShaderTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldViewProj;           // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorld;                   // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  192
                //       float4 diffuse;                // Offset:  208
                //       float4 specular;               // Offset:  224
                //
                //   } gMaterial;                       // Offset:  192 Size:    48 [unused]
                //   float4x4 gShadowTransform;         // Offset:  240 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[19], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.TexUV.x; v2.y <- vin.TexUV.y; 
                //   o4.x <- <VertShader return value>.ShadowPosH.x; o4.y <- <VertShader return value>.ShadowPosH.y; o4.z <- <VertShader return value>.ShadowPosH.z; o4.w <- <VertShader return value>.ShadowPosH.w; 
                //   o3.x <- <VertShader return value>.TexUV.x; o3.y <- <VertShader return value>.TexUV.y; 
                //   o2.x <- <VertShader return value>.NormalW.x; o2.y <- <VertShader return value>.NormalW.y; o2.z <- <VertShader return value>.NormalW.z; 
                //   o1.x <- <VertShader return value>.PosW.x; o1.y <- <VertShader return value>.PosW.y; o1.z <- <VertShader return value>.PosW.z; 
                //   o0.x <- <VertShader return value>.PosH.x; o0.y <- <VertShader return value>.PosH.y; o0.z <- <VertShader return value>.PosH.z; o0.w <- <VertShader return value>.PosH.w
                //
                #line 74 "D:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\DeferredShader.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.PosH.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.PosH.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.PosH.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- vout.PosH.w
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // r2.z <- vout.NormalW.z
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // r3.x <- vout.PosW.x
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // r3.y <- vout.PosW.y
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // r3.z <- vout.PosW.z
                mov r4.xy, v2.xyxx  // r4.x <- vout.TexUV.x; r4.y <- vout.TexUV.y
                dp4 r5.x, r0.xyzw, cb0[15].xyzw  // r5.x <- vout.ShadowPosH.x
                dp4 r5.y, r0.xyzw, cb0[16].xyzw  // r5.y <- vout.ShadowPosH.y
                dp4 r5.z, r0.xyzw, cb0[17].xyzw  // r5.z <- vout.ShadowPosH.z
                dp4 r5.w, r0.xyzw, cb0[18].xyzw  // r5.w <- vout.ShadowPosH.w
                mov o0.xyzw, r1.xyzw
                mov o4.xyzw, r5.xyzw
                mov o1.xyz, r3.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                ret 
                // Approximately 23 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldViewProj;           // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  192
                //       float4 diffuse;                // Offset:  208
                //       float4 specular;               // Offset:  224
                //
                //   } gMaterial;                       // Offset:  192 Size:    48
                //   float4x4 gShadowTransform;         // Offset:  240 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // samShadow                       sampler_c      NA          NA    1        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gShadowMap                        texture  float4          2d    1        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                // SV_TARGET                3   xyzw        3   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v4.xyzw
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.TexUV.x; v3.y <- pin.TexUV.y; 
                //   v4.x <- pin.ShadowPosH.x; v4.y <- pin.ShadowPosH.y; v4.z <- pin.ShadowPosH.z; v4.w <- pin.ShadowPosH.w; 
                //   o3.x <- <PixShader return value>.specularH.x; o3.y <- <PixShader return value>.specularH.y; o3.z <- <PixShader return value>.specularH.z; o3.w <- <PixShader return value>.specularH.w; 
                //   o2.x <- <PixShader return value>.normalW.x; o2.y <- <PixShader return value>.normalW.y; o2.z <- <PixShader return value>.normalW.z; o2.w <- <PixShader return value>.normalW.w; 
                //   o1.x <- <PixShader return value>.positionW.x; o1.y <- <PixShader return value>.positionW.y; o1.z <- <PixShader return value>.positionW.z; o1.w <- <PixShader return value>.positionW.w; 
                //   o0.x <- <PixShader return value>.diffuseH.x; o0.y <- <PixShader return value>.diffuseH.y; o0.z <- <PixShader return value>.diffuseH.z; o0.w <- <PixShader return value>.diffuseH.w
                //
                #line 87 "D:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\DeferredShader.fx"
                div r0.xyz, v4.zxyz, v4.wwww  // r0.x <- pin.ShadowPosH.z; r0.y <- pin.ShadowPosH.x; r0.z <- pin.ShadowPosH.y
                mov r0.x, r0.x  // r0.x <- depth
                itof r0.w, l(0)  // r0.w <- shadowLit
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.yzyy, t1.xxxx, s1, r0.x
                add r0.x, r0.x, r0.w  // r0.x <- shadowLit
                
                #line 94
                sample_indexable(texture2d)(float,float,float,float) r0.yzw, v3.xyxx, t0.wxyz, s0
                mul r0.yzw, r0.yyzw, cb0[13].xxyz  // r0.y <- pout.diffuseH.x; r0.z <- pout.diffuseH.y; r0.w <- pout.diffuseH.z
                mov r0.x, r0.x  // r0.x <- pout.diffuseH.w
                itof r1.w, l(1)  // r1.w <- pout.positionW.w
                mov r1.xyz, v1.xyzx  // r1.x <- pout.positionW.x; r1.y <- pout.positionW.y; r1.z <- pout.positionW.z
                mov r2.xyzw, cb0[14].xyzw  // r2.x <- pout.specularH.x; r2.y <- pout.specularH.y; r2.z <- pout.specularH.z; r2.w <- pout.specularH.w
                itof r3.w, l(0)  // r3.w <- pout.normalW.w
                mov r3.xyz, v2.xyzx  // r3.x <- pout.normalW.x; r3.y <- pout.normalW.y; r3.z <- pout.normalW.z
                mov o0.xyz, r0.yzwy
                mov o0.w, r0.x
                mov o1.xyzw, r1.xyzw
                mov o2.xyzw, r3.xyzw
                mov o3.xyzw, r2.xyzw
                ret 
                // Approximately 19 instruction slots used
                            
            };
        }

    }

}

