//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerObject
{
    float4x4 gWorldViewProj;            // Offset:    0, size:   64
    float4x4 gWorldViewInvTranspose;    // Offset:   64, size:   64
    float4x4 gWorldInvTranspose;        // Offset:  128, size:   64
    float4x4 gWorldView;                // Offset:  192, size:   64
    float4x4 gWorld;                    // Offset:  256, size:   64
    float4x4 gViewProj;                 // Offset:  320, size:   64
    Material gMaterial;                 // Offset:  384, size:   48
    float4x4 gShadowTransform;          // Offset:  432, size:   64
    int4    gDiffX_NormY_ShadZ;         // Offset:  496, size:   16
}

cbuffer cbPerFrame
{
    float3  gEyePosW;                   // Offset:    0, size:   12
}

//
// 9 local object(s)
//
Texture2D gDiffuseMap;
Texture2D gNormalMap;
Texture2D gShadowMap;
Texture2D gBumpMap;
TextureCube gCubeMap;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerComparisonState samShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS /* 2 */);
};
RasterizerState WireFrame
{
    FillMode = uint(WIREFRAME /* 2 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 DeferredShaderTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldViewProj;           // Offset:    0 Size:    64
                //   float4x4 gWorldViewInvTranspose;   // Offset:   64 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:  128 Size:    64
                //   float4x4 gWorldView;               // Offset:  192 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:  256 Size:    64
                //   float4x4 gViewProj;                // Offset:  320 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  384
                //       float4 diffuse;                // Offset:  400
                //       float4 specular;               // Offset:  416
                //
                //   } gMaterial;                       // Offset:  384 Size:    48 [unused]
                //   float4x4 gShadowTransform;         // Offset:  432 Size:    64
                //   int4 gDiffX_NormY_ShadZ;           // Offset:  496 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyzw        1     NONE   float   xyzw
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // NORMAL                   1   xyz         3     NONE   float   xyz 
                // TANGENT                  0   xyz         4     NONE   float   xyz 
                // TEXCOORD                 0   xy          5     NONE   float   xy  
                // TEXCOORD                 1   xyzw        6     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[31], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyz
                dcl_output o5.xy
                dcl_output o6.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.TangentL.x; v2.y <- vin.TangentL.y; v2.z <- vin.TangentL.z; 
                //   v3.x <- vin.TexUV.x; v3.y <- vin.TexUV.y; 
                //   o6.x <- <VertShader return value>.ShadowPosH.x; o6.y <- <VertShader return value>.ShadowPosH.y; o6.z <- <VertShader return value>.ShadowPosH.z; o6.w <- <VertShader return value>.ShadowPosH.w; 
                //   o5.x <- <VertShader return value>.TexUV.x; o5.y <- <VertShader return value>.TexUV.y; 
                //   o4.x <- <VertShader return value>.TangentV.x; o4.y <- <VertShader return value>.TangentV.y; o4.z <- <VertShader return value>.TangentV.z; 
                //   o3.x <- <VertShader return value>.NormalW.x; o3.y <- <VertShader return value>.NormalW.y; o3.z <- <VertShader return value>.NormalW.z; 
                //   o2.x <- <VertShader return value>.NormalV.x; o2.y <- <VertShader return value>.NormalV.y; o2.z <- <VertShader return value>.NormalV.z; 
                //   o1.x <- <VertShader return value>.PosW.x; o1.y <- <VertShader return value>.PosW.y; o1.z <- <VertShader return value>.PosW.z; o1.w <- <VertShader return value>.PosW.w; 
                //   o0.x <- <VertShader return value>.PosH.x; o0.y <- <VertShader return value>.PosH.y; o0.z <- <VertShader return value>.PosH.z; o0.w <- <VertShader return value>.PosH.w
                //
                #line 103 "D:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\DeferredShader.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.PosH.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.PosH.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.PosH.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- vout.PosH.w
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // r2.x <- vout.NormalV.x
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // r2.y <- vout.NormalV.y
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // r2.z <- vout.NormalV.z
                dp3 r3.x, v2.xyzx, cb0[4].xyzx  // r3.x <- vout.TangentV.x
                dp3 r3.y, v2.xyzx, cb0[5].xyzx  // r3.y <- vout.TangentV.y
                dp3 r3.z, v2.xyzx, cb0[6].xyzx  // r3.z <- vout.TangentV.z
                mov r4.xy, v3.xyxx  // r4.x <- vout.TexUV.x; r4.y <- vout.TexUV.y
                dp4 r5.x, r0.xyzw, cb0[27].xyzw  // r5.x <- vout.ShadowPosH.x
                dp4 r5.y, r0.xyzw, cb0[28].xyzw  // r5.y <- vout.ShadowPosH.y
                dp4 r5.z, r0.xyzw, cb0[29].xyzw  // r5.z <- vout.ShadowPosH.z
                dp4 r5.w, r0.xyzw, cb0[30].xyzw  // r5.w <- vout.ShadowPosH.w
                dp4 r6.x, r0.xyzw, cb0[16].xyzw  // r6.x <- vout.PosW.x
                dp4 r6.y, r0.xyzw, cb0[17].xyzw  // r6.y <- vout.PosW.y
                dp4 r6.z, r0.xyzw, cb0[18].xyzw  // r6.z <- vout.PosW.z
                dp4 r6.w, r0.xyzw, cb0[19].xyzw  // r6.w <- vout.PosW.w
                dp3 r0.x, v1.xyzx, cb0[8].xyzx  // r0.x <- vout.NormalW.x
                dp3 r0.y, v1.xyzx, cb0[9].xyzx  // r0.y <- vout.NormalW.y
                dp3 r0.z, v1.xyzx, cb0[10].xyzx  // r0.z <- vout.NormalW.z
                mov o0.xyzw, r1.xyzw
                mov o1.xyzw, r6.xyzw
                mov o6.xyzw, r5.xyzw
                mov o2.xyz, r2.xyzx
                mov o3.xyz, r0.xyzx
                mov o4.xyz, r3.xyzx
                mov o5.xy, r4.xyxx
                ret 
                // Approximately 32 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldViewProj;           // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewInvTranspose;   // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldView;               // Offset:  192 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:  256 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  320 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  384
                //       float4 diffuse;                // Offset:  400
                //       float4 specular;               // Offset:  416
                //
                //   } gMaterial;                       // Offset:  384 Size:    48
                //   float4x4 gShadowTransform;         // Offset:  432 Size:    64 [unused]
                //   int4 gDiffX_NormY_ShadZ;           // Offset:  496 Size:    16
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gEyePosW;                   // Offset:    0 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // samShadow                       sampler_c      NA          NA    1        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gShadowMap                        texture  float4          2d    2        1
                // gCubeMap                          texture  float4        cube    3        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyzw        1     NONE   float   xyzw
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // NORMAL                   1   xyz         3     NONE   float   xyz 
                // TANGENT                  0   xyz         4     NONE   float   xyz 
                // TEXCOORD                 0   xy          5     NONE   float   xy  
                // TEXCOORD                 1   xyzw        6     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                // SV_TARGET                1   xy          1   TARGET   float   xy  
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[32], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texturecube (float,float,float,float) t3
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xyz
                dcl_input_ps linear v5.xy
                dcl_input_ps linear v6.xyzw
                dcl_output o0.xyzw
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 9
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; v1.w <- pin.PosW.w; 
                //   v2.x <- pin.NormalV.x; v2.y <- pin.NormalV.y; v2.z <- pin.NormalV.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.TangentV.x; v4.y <- pin.TangentV.y; v4.z <- pin.TangentV.z; 
                //   v5.x <- pin.TexUV.x; v5.y <- pin.TexUV.y; 
                //   v6.x <- pin.ShadowPosH.x; v6.y <- pin.ShadowPosH.y; v6.z <- pin.ShadowPosH.z; v6.w <- pin.ShadowPosH.w; 
                //   o2.x <- <PixShader return value>.specularH.x; o2.y <- <PixShader return value>.specularH.y; o2.z <- <PixShader return value>.specularH.z; o2.w <- <PixShader return value>.specularH.w; 
                //   o1.x <- <PixShader return value>.normalV.x; o1.y <- <PixShader return value>.normalV.y; 
                //   o0.x <- <PixShader return value>.diffuseH.x; o0.y <- <PixShader return value>.diffuseH.y; o0.z <- <PixShader return value>.diffuseH.z; o0.w <- <PixShader return value>.diffuseH.w
                //
                #line 117 "D:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\DeferredShader.fx"
                div r0.xyz, v1.xyzx, v1.wwww  // r0.x <- pin.PosW.x; r0.y <- pin.PosW.y; r0.z <- pin.PosW.z
                mov r1.xyz, -cb1[0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- eyeRay.x; r0.y <- eyeRay.y; r0.z <- eyeRay.z
                dp3 r0.w, r0.xyzx, v3.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r1.xyz, r0.wwww, v3.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- refRay.x; r0.y <- refRay.y; r0.z <- refRay.z
                
                #line 123
                div r1.xyz, v6.zxyz, v6.wwww  // r1.x <- pin.ShadowPosH.z; r1.y <- pin.ShadowPosH.x; r1.z <- pin.ShadowPosH.y
                mov r1.x, r1.x  // r1.x <- depth
                ineg r0.w, cb0[31].z
                iadd r0.w, r0.w, l(1)
                itof r0.w, r0.w  // r0.w <- shadowLit
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r1.yzyy, t2.xxxx, s1, r1.x
                add r0.w, r0.w, r1.x
                
                #line 132
                ineg r1.x, cb0[31].x
                iadd r1.x, r1.x, l(1)
                itof r1.xyz, r1.xxxx
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t3.xyzw, s0
                mul r0.xyz, r0.xyzx, r1.xyzx
                itof r1.xyz, cb0[31].xxxx
                sample_indexable(texture2d)(float,float,float,float) r2.xyz, v5.xyxx, t0.xyzw, s0
                mul r1.xyz, r1.xyzx, r2.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, cb0[25].xyzx  // r0.x <- pout.diffuseH.x; r0.y <- pout.diffuseH.y; r0.z <- pout.diffuseH.z
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- pout.diffuseH.w
                mov r1.xyzw, cb0[26].wxyz  // r1.x <- pout.specularH.w; r1.y <- pout.specularH.x; r1.z <- pout.specularH.y; r1.w <- pout.specularH.z
                div r1.x, r1.x, l(255.000000)
                dp3 r2.x, v2.xyzx, v2.xyzx
                rsq r2.x, r2.x
                mul r2.xy, r2.xxxx, v2.xyxx  // r2.x <- pout.normalV.x; r2.y <- pout.normalV.y
                ilt r2.z, l(0), cb0[31].y
                if_nz r2.z
                  sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.xyxx, t1.xyzw, s0
                  mov r3.xyz, r3.xyzx  // r3.x <- normalMapNormal.x; r3.y <- normalMapNormal.y; r3.z <- normalMapNormal.z
                  mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                  mov r4.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                  add r3.xyz, r3.xyzx, r4.xyzx
                
                #line 143
                  dp3 r2.z, v2.xyzx, v2.xyzx
                  rsq r2.z, r2.z
                  mul r4.xyz, r2.zzzz, v2.xyzx  // r4.x <- N.x; r4.y <- N.y; r4.z <- N.z
                  dp3 r2.z, v4.xyzx, r4.xyzx
                  mul r5.xyz, r4.yzxy, r2.zzzz
                  mov r5.xyz, -r5.xyzx
                  add r5.xyz, r5.xyzx, v4.yzxy
                  dp3 r2.z, r5.xyzx, r5.xyzx
                  rsq r2.z, r2.z
                  mul r5.xyz, r2.zzzz, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                  mul r6.xyz, r4.yzxy, r5.yzxy
                  mul r7.xyz, r4.zxyz, r5.xyzx
                  mov r7.xyz, -r7.xyzx
                  add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                  mov r7.x, r5.z  // r7.x <- TBN._m00
                  mov r7.y, r6.x  // r7.y <- TBN._m10
                  mov r7.z, r4.x  // r7.z <- TBN._m20
                  mov r8.x, r5.x  // r8.x <- TBN._m01
                  mov r8.y, r6.y  // r8.y <- TBN._m11
                  mov r8.z, r4.y  // r8.z <- TBN._m21
                  mov r4.x, r5.y  // r4.x <- TBN._m02
                  mov r4.y, r6.z  // r4.y <- TBN._m12
                  mov r4.z, r4.z  // r4.z <- TBN._m22
                  dp3 r5.x, r3.xyzx, r7.xyzx
                  dp3 r5.y, r3.xyzx, r8.xyzx
                  dp3 r5.z, r3.xyzx, r4.xyzx
                  dp3 r2.z, r5.xyzx, r5.xyzx
                  rsq r2.z, r2.z
                  mul r2.xy, r2.zzzz, r5.xyxx
                endif 
                
                #line 153
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                mov o2.xyz, r1.yzwy
                mov o2.w, r1.x
                mov o1.xy, r2.xyxx
                ret 
                // Approximately 78 instruction slots used
                            
            };
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NULL;
        }

    }

    technique11 DeferredShaderTessTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldViewProj;           // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewInvTranspose;   // Offset:   64 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:  128 Size:    64
                //   float4x4 gWorldView;               // Offset:  192 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:  256 Size:    64
                //   float4x4 gViewProj;                // Offset:  320 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  384
                //       float4 diffuse;                // Offset:  400
                //       float4 specular;               // Offset:  416
                //
                //   } gMaterial;                       // Offset:  384 Size:    48 [unused]
                //   float4x4 gShadowTransform;         // Offset:  432 Size:    64
                //   int4 gDiffX_NormY_ShadZ;           // Offset:  496 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TANGENT                  0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // NORMAL                   1   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1   xyzw        5     NONE   float   xyzw
                // TESS                     0   xyzw        6     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[31], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output o0.xyzw
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyzw
                dcl_output o6.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.TangentL.x; v2.y <- vin.TangentL.y; v2.z <- vin.TangentL.z; 
                //   v3.x <- vin.TexUV.x; v3.y <- vin.TexUV.y; 
                //   o6.x <- <TessVertexShader return value>.TessFactor.x; o6.y <- <TessVertexShader return value>.TessFactor.y; o6.z <- <TessVertexShader return value>.TessFactor.z; o6.w <- <TessVertexShader return value>.TessFactor.w; 
                //   o5.x <- <TessVertexShader return value>.ShadowPosH.x; o5.y <- <TessVertexShader return value>.ShadowPosH.y; o5.z <- <TessVertexShader return value>.ShadowPosH.z; o5.w <- <TessVertexShader return value>.ShadowPosH.w; 
                //   o4.x <- <TessVertexShader return value>.TexUV.x; o4.y <- <TessVertexShader return value>.TexUV.y; 
                //   o3.x <- <TessVertexShader return value>.TangentV.x; o3.y <- <TessVertexShader return value>.TangentV.y; o3.z <- <TessVertexShader return value>.TangentV.z; 
                //   o2.x <- <TessVertexShader return value>.NormalW.x; o2.y <- <TessVertexShader return value>.NormalW.y; o2.z <- <TessVertexShader return value>.NormalW.z; 
                //   o1.x <- <TessVertexShader return value>.NormalV.x; o1.y <- <TessVertexShader return value>.NormalV.y; o1.z <- <TessVertexShader return value>.NormalV.z; 
                //   o0.x <- <TessVertexShader return value>.PosW.x; o0.y <- <TessVertexShader return value>.PosW.y; o0.z <- <TessVertexShader return value>.PosW.z; o0.w <- <TessVertexShader return value>.PosW.w
                //
                #line 160 "D:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\DeferredShader.fx"
                dp3 r0.x, v1.xyzx, cb0[4].xyzx  // r0.x <- vout.NormalV.x
                dp3 r0.y, v1.xyzx, cb0[5].xyzx  // r0.y <- vout.NormalV.y
                dp3 r0.z, v1.xyzx, cb0[6].xyzx  // r0.z <- vout.NormalV.z
                dp3 r1.x, v2.xyzx, cb0[4].xyzx  // r1.x <- vout.TangentV.x
                dp3 r1.y, v2.xyzx, cb0[5].xyzx  // r1.y <- vout.TangentV.y
                dp3 r1.z, v2.xyzx, cb0[6].xyzx  // r1.z <- vout.TangentV.z
                mov r2.xy, v3.xyxx  // r2.x <- vout.TexUV.x; r2.y <- vout.TexUV.y
                mov r3.xyz, v0.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[27].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r3.xyzw, cb0[28].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r3.xyzw, cb0[29].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r3.xyzw, cb0[30].xyzw  // r4.w <- vout.ShadowPosH.w
                dp4 r5.x, r3.xyzw, cb0[16].xyzw  // r5.x <- vout.PosW.x
                dp4 r5.y, r3.xyzw, cb0[17].xyzw  // r5.y <- vout.PosW.y
                dp4 r5.z, r3.xyzw, cb0[18].xyzw  // r5.z <- vout.PosW.z
                dp4 r5.w, r3.xyzw, cb0[19].xyzw  // r5.w <- vout.PosW.w
                dp3 r3.x, v1.xyzx, cb0[8].xyzx  // r3.x <- vout.NormalW.x
                dp3 r3.y, v1.xyzx, cb0[9].xyzx  // r3.y <- vout.NormalW.y
                dp3 r3.z, v1.xyzx, cb0[10].xyzx  // r3.z <- vout.NormalW.z
                itof r6.xyzw, l(32, 32, 32, 32)  // r6.x <- vout.TessFactor.x; r6.y <- vout.TessFactor.y; r6.z <- vout.TessFactor.z; r6.w <- vout.TessFactor.w
                mov o0.xyzw, r5.xyzw
                mov o5.xyzw, r4.xyzw
                mov o6.xyzw, r6.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r3.xyzx
                mov o3.xyz, r1.xyzx
                mov o4.xy, r2.xyxx
                ret 
                // Approximately 29 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float   x   
                // SV_TessFactor            1   x           1  TRIEDGE   float   x   
                // SV_TessFactor            2   x           2  TRIEDGE   float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // NORMAL                   1   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1   xyzw        5     NONE   float   xyzw
                // TESS                     0   xyzw        6     NONE   float   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // NORMAL                   1   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1   xyzw        5     NONE   float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Odd Fractional    
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_fractional_odd
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xyz
                dcl_input v[3][3].xyz
                dcl_input v[3][4].xy
                dcl_input v[3][5].xyzw
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o5.x <- <HS return value>.ShadowPosH.x; o5.y <- <HS return value>.ShadowPosH.y; o5.z <- <HS return value>.ShadowPosH.z; o5.w <- <HS return value>.ShadowPosH.w; 
                //   o4.x <- <HS return value>.TexUV.x; o4.y <- <HS return value>.TexUV.y; 
                //   o3.x <- <HS return value>.TangentV.x; o3.y <- <HS return value>.TangentV.y; o3.z <- <HS return value>.TangentV.z; 
                //   o2.x <- <HS return value>.NormalW.x; o2.y <- <HS return value>.NormalW.y; o2.z <- <HS return value>.NormalW.z; 
                //   o1.x <- <HS return value>.NormalV.x; o1.y <- <HS return value>.NormalV.y; o1.z <- <HS return value>.NormalV.z; 
                //   o0.x <- <HS return value>.PosW.x; o0.y <- <HS return value>.PosW.y; o0.z <- <HS return value>.PosW.z; 
                //   v[0][0].x <- p[0].PosW.x; v[0][0].y <- p[0].PosW.y; v[0][0].z <- p[0].PosW.z; v[0][0].w <- p[0].PosW.w; 
                //   v[0][1].x <- p[0].NormalV.x; v[0][1].y <- p[0].NormalV.y; v[0][1].z <- p[0].NormalV.z; 
                //   v[0][2].x <- p[0].NormalW.x; v[0][2].y <- p[0].NormalW.y; v[0][2].z <- p[0].NormalW.z; 
                //   v[0][3].x <- p[0].TangentV.x; v[0][3].y <- p[0].TangentV.y; v[0][3].z <- p[0].TangentV.z; 
                //   v[0][4].x <- p[0].TexUV.x; v[0][4].y <- p[0].TexUV.y; 
                //   v[0][5].x <- p[0].ShadowPosH.x; v[0][5].y <- p[0].ShadowPosH.y; v[0][5].z <- p[0].ShadowPosH.z; v[0][5].w <- p[0].ShadowPosH.w; 
                //   v[0][6].x <- p[0].TessFactor.x; v[0][6].y <- p[0].TessFactor.y; v[0][6].z <- p[0].TessFactor.z; v[0][6].w <- p[0].TessFactor.w; 
                //   v[1][0].x <- p[1].PosW.x; v[1][0].y <- p[1].PosW.y; v[1][0].z <- p[1].PosW.z; v[1][0].w <- p[1].PosW.w; 
                //   v[1][1].x <- p[1].NormalV.x; v[1][1].y <- p[1].NormalV.y; v[1][1].z <- p[1].NormalV.z; 
                //   v[1][2].x <- p[1].NormalW.x; v[1][2].y <- p[1].NormalW.y; v[1][2].z <- p[1].NormalW.z; 
                //   v[1][3].x <- p[1].TangentV.x; v[1][3].y <- p[1].TangentV.y; v[1][3].z <- p[1].TangentV.z; 
                //   v[1][4].x <- p[1].TexUV.x; v[1][4].y <- p[1].TexUV.y; 
                //   v[1][5].x <- p[1].ShadowPosH.x; v[1][5].y <- p[1].ShadowPosH.y; v[1][5].z <- p[1].ShadowPosH.z; v[1][5].w <- p[1].ShadowPosH.w; 
                //   v[1][6].x <- p[1].TessFactor.x; v[1][6].y <- p[1].TessFactor.y; v[1][6].z <- p[1].TessFactor.z; v[1][6].w <- p[1].TessFactor.w; 
                //   v[2][0].x <- p[2].PosW.x; v[2][0].y <- p[2].PosW.y; v[2][0].z <- p[2].PosW.z; v[2][0].w <- p[2].PosW.w; 
                //   v[2][1].x <- p[2].NormalV.x; v[2][1].y <- p[2].NormalV.y; v[2][1].z <- p[2].NormalV.z; 
                //   v[2][2].x <- p[2].NormalW.x; v[2][2].y <- p[2].NormalW.y; v[2][2].z <- p[2].NormalW.z; 
                //   v[2][3].x <- p[2].TangentV.x; v[2][3].y <- p[2].TangentV.y; v[2][3].z <- p[2].TangentV.z; 
                //   v[2][4].x <- p[2].TexUV.x; v[2][4].y <- p[2].TexUV.y; 
                //   v[2][5].x <- p[2].ShadowPosH.x; v[2][5].y <- p[2].ShadowPosH.y; v[2][5].z <- p[2].ShadowPosH.z; v[2][5].w <- p[2].ShadowPosH.w; 
                //   v[2][6].x <- p[2].TessFactor.x; v[2][6].y <- p[2].TessFactor.y; v[2][6].z <- p[2].TessFactor.z; v[2][6].w <- p[2].TessFactor.w
                //
                #line 217 "D:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\DeferredShader.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosW.x; r0.z <- hout.PosW.y; r0.w <- hout.PosW.z
                mov r1.xyz, v[r0.x + 0][1].xyzx  // r1.x <- hout.NormalV.x; r1.y <- hout.NormalV.y; r1.z <- hout.NormalV.z
                mov r2.xyz, v[r0.x + 0][2].xyzx  // r2.x <- hout.NormalW.x; r2.y <- hout.NormalW.y; r2.z <- hout.NormalW.z
                mov r3.xyz, v[r0.x + 0][3].xyzx  // r3.x <- hout.TangentV.x; r3.y <- hout.TangentV.y; r3.z <- hout.TangentV.z
                mov r4.xy, v[r0.x + 0][4].xyxx  // r4.x <- hout.TexUV.x; r4.y <- hout.TexUV.y
                mov r5.xyzw, v[r0.x + 0][5].xyzw  // r5.x <- hout.ShadowPosH.x; r5.y <- hout.ShadowPosH.y; r5.z <- hout.ShadowPosH.z; r5.w <- hout.ShadowPosH.w
                mov o5.xyzw, r5.xyzw
                mov o0.xyz, r0.yzwy
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyz, r3.xyzx
                mov o4.xy, r4.xyxx
                ret 
                hs_join_phase 
                dcl_input vicp[3][6].x
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 1
                
                #line 187
                add r0.x, vicp[2][6].x, vicp[1][6].x
                mul r0.x, r0.x, l(0.500000)  // r0.x <- pt.EdgeTess[0]
                add r0.y, vicp[0][6].x, vicp[2][6].x
                mul r0.y, r0.y, l(0.500000)  // r0.y <- pt.EdgeTess[1]
                add r0.z, vicp[1][6].x, vicp[0][6].x
                mul r0.z, r0.z, l(0.500000)  // r0.z <- pt.EdgeTess[2]
                mov r0.x, r0.x  // r0.x <- pt.InsideTess
                mov o0.x, r0.x
                mov o1.x, r0.y
                mov o2.x, r0.z
                mov o3.x, r0.x
                ret 
                // Approximately 26 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldViewProj;           // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewInvTranspose;   // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldView;               // Offset:  192 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:  256 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  320 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  384
                //       float4 diffuse;                // Offset:  400
                //       float4 specular;               // Offset:  416
                //
                //   } gMaterial;                       // Offset:  384 Size:    48 [unused]
                //   float4x4 gShadowTransform;         // Offset:  432 Size:    64 [unused]
                //   int4 gDiffX_NormY_ShadZ;           // Offset:  496 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gBumpMap                          texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0  TRIEDGE   float       
                // SV_TessFactor            1   x           1  TRIEDGE   float       
                // SV_TessFactor            2   x           2  TRIEDGE   float       
                // SV_InsideTessFactor      0   x           3   TRIINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // NORMAL                   1   xyz         2     NONE   float   xyz 
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TEXCOORD                 1   xyzw        5     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // NORMAL                   1   xyz         3     NONE   float   xyz 
                // TANGENT                  0   xyz         4     NONE   float   xyz 
                // TEXCOORD                 0   xy          5     NONE   float   xy  
                // TEXCOORD                 1   xyzw        6     NONE   float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[24], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xyz
                dcl_input vicp[3][3].xyz
                dcl_input vicp[3][4].xy
                dcl_input vicp[3][5].xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyz
                dcl_output o5.xy
                dcl_output o6.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   vpc3.x <- patchTess.InsideTess; 
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vDomain.x <- bary.x; vDomain.y <- bary.y; vDomain.z <- bary.z; 
                //   o6.x <- <DS return value>.ShadowPosH.x; o6.y <- <DS return value>.ShadowPosH.y; o6.z <- <DS return value>.ShadowPosH.z; o6.w <- <DS return value>.ShadowPosH.w; 
                //   o5.x <- <DS return value>.TexUV.x; o5.y <- <DS return value>.TexUV.y; 
                //   o4.x <- <DS return value>.TangentV.x; o4.y <- <DS return value>.TangentV.y; o4.z <- <DS return value>.TangentV.z; 
                //   o3.x <- <DS return value>.NormalW.x; o3.y <- <DS return value>.NormalW.y; o3.z <- <DS return value>.NormalW.z; 
                //   o2.x <- <DS return value>.NormalV.x; o2.y <- <DS return value>.NormalV.y; o2.z <- <DS return value>.NormalV.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- tri[0].PosW.x; vicp[0][0].y <- tri[0].PosW.y; vicp[0][0].z <- tri[0].PosW.z; 
                //   vicp[0][1].x <- tri[0].NormalV.x; vicp[0][1].y <- tri[0].NormalV.y; vicp[0][1].z <- tri[0].NormalV.z; 
                //   vicp[0][2].x <- tri[0].NormalW.x; vicp[0][2].y <- tri[0].NormalW.y; vicp[0][2].z <- tri[0].NormalW.z; 
                //   vicp[0][3].x <- tri[0].TangentV.x; vicp[0][3].y <- tri[0].TangentV.y; vicp[0][3].z <- tri[0].TangentV.z; 
                //   vicp[0][4].x <- tri[0].TexUV.x; vicp[0][4].y <- tri[0].TexUV.y; 
                //   vicp[0][5].x <- tri[0].ShadowPosH.x; vicp[0][5].y <- tri[0].ShadowPosH.y; vicp[0][5].z <- tri[0].ShadowPosH.z; vicp[0][5].w <- tri[0].ShadowPosH.w; 
                //   vicp[1][0].x <- tri[1].PosW.x; vicp[1][0].y <- tri[1].PosW.y; vicp[1][0].z <- tri[1].PosW.z; 
                //   vicp[1][1].x <- tri[1].NormalV.x; vicp[1][1].y <- tri[1].NormalV.y; vicp[1][1].z <- tri[1].NormalV.z; 
                //   vicp[1][2].x <- tri[1].NormalW.x; vicp[1][2].y <- tri[1].NormalW.y; vicp[1][2].z <- tri[1].NormalW.z; 
                //   vicp[1][3].x <- tri[1].TangentV.x; vicp[1][3].y <- tri[1].TangentV.y; vicp[1][3].z <- tri[1].TangentV.z; 
                //   vicp[1][4].x <- tri[1].TexUV.x; vicp[1][4].y <- tri[1].TexUV.y; 
                //   vicp[1][5].x <- tri[1].ShadowPosH.x; vicp[1][5].y <- tri[1].ShadowPosH.y; vicp[1][5].z <- tri[1].ShadowPosH.z; vicp[1][5].w <- tri[1].ShadowPosH.w; 
                //   vicp[2][0].x <- tri[2].PosW.x; vicp[2][0].y <- tri[2].PosW.y; vicp[2][0].z <- tri[2].PosW.z; 
                //   vicp[2][1].x <- tri[2].NormalV.x; vicp[2][1].y <- tri[2].NormalV.y; vicp[2][1].z <- tri[2].NormalV.z; 
                //   vicp[2][2].x <- tri[2].NormalW.x; vicp[2][2].y <- tri[2].NormalW.y; vicp[2][2].z <- tri[2].NormalW.z; 
                //   vicp[2][3].x <- tri[2].TangentV.x; vicp[2][3].y <- tri[2].TangentV.y; vicp[2][3].z <- tri[2].TangentV.z; 
                //   vicp[2][4].x <- tri[2].TexUV.x; vicp[2][4].y <- tri[2].TexUV.y; 
                //   vicp[2][5].x <- tri[2].ShadowPosH.x; vicp[2][5].y <- tri[2].ShadowPosH.y; vicp[2][5].z <- tri[2].ShadowPosH.z; vicp[2][5].w <- tri[2].ShadowPosH.w
                //
                #line 247 "D:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\DeferredShader.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- dout.NormalV.x; r1.y <- dout.NormalV.y; r1.z <- dout.NormalV.z
                mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
                mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- dout.NormalW.x; r2.y <- dout.NormalW.y; r2.z <- dout.NormalW.z
                mul r3.xyz, vDomain.xxxx, vicp[0][3].xyzx
                mul r4.xyz, vDomain.yyyy, vicp[1][3].xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r4.xyz, vDomain.zzzz, vicp[2][3].xyzx
                add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- dout.TangentV.x; r3.y <- dout.TangentV.y; r3.z <- dout.TangentV.z
                mul r4.xy, vDomain.xxxx, vicp[0][4].xyxx
                mul r4.zw, vDomain.yyyy, vicp[1][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx
                mul r4.zw, vDomain.zzzz, vicp[2][4].xxxy
                add r4.xy, r4.zwzz, r4.xyxx  // r4.x <- dout.TexUV.x; r4.y <- dout.TexUV.y
                mul r5.xyzw, vDomain.xxxx, vicp[0][5].xyzw
                mul r6.xyzw, vDomain.yyyy, vicp[1][5].xyzw
                add r5.xyzw, r5.xyzw, r6.xyzw
                mul r6.xyzw, vDomain.zzzz, vicp[2][5].xyzw
                add r5.xyzw, r5.xyzw, r6.xyzw  // r5.x <- dout.ShadowPosH.x; r5.y <- dout.ShadowPosH.y; r5.z <- dout.ShadowPosH.z; r5.w <- dout.ShadowPosH.w
                
                #line 255
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                dp3 r0.w, r2.xyzx, r2.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, r2.xyzx
                
                #line 268
                itof r0.w, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r4.xyxx, t0.yzwx, s0, r0.w
                mov r0.w, r0.w  // r0.w <- h
                
                #line 271
                mov r1.w, l(-1.000000)
                add r0.w, r0.w, r1.w
                mul r0.w, r0.w, l(0.200000)
                mul r6.xyz, r2.xyzx, r0.wwww
                add r0.xyz, r0.xyzx, r6.xyzx
                
                #line 274
                mov r0.w, l(1.000000)
                dp4 r6.x, r0.xyzw, cb0[20].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r0.xyzw, cb0[21].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.z, r0.xyzw, cb0[22].xyzw  // r6.z <- dout.PosH.z
                dp4 r6.w, r0.xyzw, cb0[23].xyzw  // r6.w <- dout.PosH.w
                mov o0.xyzw, r6.xyzw
                mov o6.xyzw, r5.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xyz, r2.xyzx
                mov o4.xyz, r3.xyzx
                mov o5.xy, r4.xyxx
                ret 
                // Approximately 57 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldViewProj;           // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewInvTranspose;   // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldView;               // Offset:  192 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:  256 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  320 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  384
                //       float4 diffuse;                // Offset:  400
                //       float4 specular;               // Offset:  416
                //
                //   } gMaterial;                       // Offset:  384 Size:    48
                //   float4x4 gShadowTransform;         // Offset:  432 Size:    64 [unused]
                //   int4 gDiffX_NormY_ShadZ;           // Offset:  496 Size:    16
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gEyePosW;                   // Offset:    0 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // samShadow                       sampler_c      NA          NA    1        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gShadowMap                        texture  float4          2d    2        1
                // gCubeMap                          texture  float4        cube    3        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // NORMAL                   1   xyz         3     NONE   float   xyz 
                // TANGENT                  0   xyz         4     NONE   float   xyz 
                // TEXCOORD                 0   xy          5     NONE   float   xy  
                // TEXCOORD                 1   xyzw        6     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                // SV_TARGET                1   xy          1   TARGET   float   xy  
                // SV_TARGET                2   xyzw        2   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[32], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texturecube (float,float,float,float) t3
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xyz
                dcl_input_ps linear v5.xy
                dcl_input_ps linear v6.xyzw
                dcl_output o0.xyzw
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 9
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalV.x; v2.y <- pin.NormalV.y; v2.z <- pin.NormalV.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.TangentV.x; v4.y <- pin.TangentV.y; v4.z <- pin.TangentV.z; 
                //   v5.x <- pin.TexUV.x; v5.y <- pin.TexUV.y; 
                //   v6.x <- pin.ShadowPosH.x; v6.y <- pin.ShadowPosH.y; v6.z <- pin.ShadowPosH.z; v6.w <- pin.ShadowPosH.w; 
                //   o2.x <- <TessPixShader return value>.specularH.x; o2.y <- <TessPixShader return value>.specularH.y; o2.z <- <TessPixShader return value>.specularH.z; o2.w <- <TessPixShader return value>.specularH.w; 
                //   o1.x <- <TessPixShader return value>.normalV.x; o1.y <- <TessPixShader return value>.normalV.y; 
                //   o0.x <- <TessPixShader return value>.diffuseH.x; o0.y <- <TessPixShader return value>.diffuseH.y; o0.z <- <TessPixShader return value>.diffuseH.z; o0.w <- <TessPixShader return value>.diffuseH.w
                //
                #line 283 "D:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\DeferredShader.fx"
                mov r0.xyz, -cb1[0].xyzx
                add r0.xyz, r0.xyzx, v1.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- eyeRay.x; r0.y <- eyeRay.y; r0.z <- eyeRay.z
                dp3 r0.w, r0.xyzx, v3.xyzx
                add r0.w, r0.w, r0.w
                mov r0.w, -r0.w
                mul r1.xyz, r0.wwww, v3.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- refRay.x; r0.y <- refRay.y; r0.z <- refRay.z
                
                #line 287
                div r1.xyz, v6.zxyz, v6.wwww  // r1.x <- pin.ShadowPosH.z; r1.y <- pin.ShadowPosH.x; r1.z <- pin.ShadowPosH.y
                mov r1.x, r1.x  // r1.x <- depth
                ineg r0.w, cb0[31].z
                iadd r0.w, r0.w, l(1)
                itof r0.w, r0.w  // r0.w <- shadowLit
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r1.yzyy, t2.xxxx, s1, r1.x
                add r0.w, r0.w, r1.x
                
                #line 294
                ineg r1.x, cb0[31].x
                iadd r1.x, r1.x, l(1)
                itof r1.xyz, r1.xxxx
                sample_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t3.xyzw, s0
                mul r0.xyz, r0.xyzx, r1.xyzx
                itof r1.xyz, cb0[31].xxxx
                sample_indexable(texture2d)(float,float,float,float) r2.xyz, v5.xyxx, t0.xyzw, s0
                mul r1.xyz, r1.xyzx, r2.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, cb0[25].xyzx  // r0.x <- pout.diffuseH.x; r0.y <- pout.diffuseH.y; r0.z <- pout.diffuseH.z
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- pout.diffuseH.w
                mov r1.xyzw, cb0[26].wxyz  // r1.x <- pout.specularH.w; r1.y <- pout.specularH.x; r1.z <- pout.specularH.y; r1.w <- pout.specularH.z
                div r1.x, r1.x, l(255.000000)
                dp3 r2.x, v2.xyzx, v2.xyzx
                rsq r2.x, r2.x
                mul r2.xy, r2.xxxx, v2.xyxx  // r2.x <- pout.normalV.x; r2.y <- pout.normalV.y
                
                #line 302
                ilt r2.z, l(0), cb0[31].y
                if_nz r2.z
                  sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.xyxx, t1.xyzw, s0
                  mov r3.xyz, r3.xyzx  // r3.x <- normalMapNormal.x; r3.y <- normalMapNormal.y; r3.z <- normalMapNormal.z
                  mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                  mov r4.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                  add r3.xyz, r3.xyzx, r4.xyzx
                  dp3 r2.z, v2.xyzx, v2.xyzx
                  rsq r2.z, r2.z
                  mul r4.xyz, r2.zzzz, v2.xyzx  // r4.x <- N.x; r4.y <- N.y; r4.z <- N.z
                  dp3 r2.z, v4.xyzx, r4.xyzx
                  mul r5.xyz, r4.yzxy, r2.zzzz
                  mov r5.xyz, -r5.xyzx
                  add r5.xyz, r5.xyzx, v4.yzxy
                  dp3 r2.z, r5.xyzx, r5.xyzx
                  rsq r2.z, r2.z
                  mul r5.xyz, r2.zzzz, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                  mul r6.xyz, r4.yzxy, r5.yzxy
                  mul r7.xyz, r4.zxyz, r5.xyzx
                  mov r7.xyz, -r7.xyzx
                  add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                  mov r7.x, r5.z  // r7.x <- TBN._m00
                  mov r7.y, r6.x  // r7.y <- TBN._m10
                  mov r7.z, r4.x  // r7.z <- TBN._m20
                  mov r8.x, r5.x  // r8.x <- TBN._m01
                  mov r8.y, r6.y  // r8.y <- TBN._m11
                  mov r8.z, r4.y  // r8.z <- TBN._m21
                  mov r4.x, r5.y  // r4.x <- TBN._m02
                  mov r4.y, r6.z  // r4.y <- TBN._m12
                  mov r4.z, r4.z  // r4.z <- TBN._m22
                  dp3 r5.x, r3.xyzx, r7.xyzx
                  dp3 r5.y, r3.xyzx, r8.xyzx
                  dp3 r5.z, r3.xyzx, r4.xyzx
                  dp3 r2.z, r5.xyzx, r5.xyzx
                  rsq r2.z, r2.z
                  mul r2.xy, r2.zzzz, r5.xyxx
                
                #line 313
                endif 
                
                #line 317
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                mov o2.xyz, r1.yzwy
                mov o2.w, r1.x
                mov o1.xy, r2.xyxx
                ret 
                // Approximately 77 instruction slots used
                            
            };
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NULL;
        }

    }

}

