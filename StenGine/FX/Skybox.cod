//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerObject
{
    float4x4 gWorldViewProj;            // Offset:    0, size:   64
}

cbuffer cbFixed
{
    float3  vertexArray[24] = { -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1 };// Offset:    0, size:  380
    uint    indexArray[36] = { 1, 0, 2, 2, 0, 3, 5, 4, 6, 6, 4, 7, 9, 8, 10, 10, 8, 11, 13, 12, 14, 14, 12, 15, 17, 16, 18, 18, 16, 19, 21, 20, 22, 22, 20, 23 };// Offset:  384, size:  564
}

//
// 2 local object(s)
//
SamplerState samTriLinearSam
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
TextureCube gCubeMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 SkyboxTech
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldViewProj;           // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float3 vertexArray[24];            // Offset:    0 Size:   380
                //      = 0xbf800000 0xbf800000 0xbf800000 0x00000000 
                //        0xbf800000 0x3f800000 0xbf800000 0x00000000 
                //        0x3f800000 0x3f800000 0xbf800000 0x00000000 
                //        0x3f800000 0xbf800000 0xbf800000 0x00000000 
                //        0xbf800000 0xbf800000 0x3f800000 0x00000000 
                //        0x3f800000 0xbf800000 0x3f800000 0x00000000 
                //        0x3f800000 0x3f800000 0x3f800000 0x00000000 
                //        0xbf800000 0x3f800000 0x3f800000 0x00000000 
                //        0xbf800000 0x3f800000 0xbf800000 0x00000000 
                //        0xbf800000 0x3f800000 0x3f800000 0x00000000 
                //        0x3f800000 0x3f800000 0x3f800000 0x00000000 
                //        0x3f800000 0x3f800000 0xbf800000 0x00000000 
                //        0xbf800000 0xbf800000 0xbf800000 0x00000000 
                //        0x3f800000 0xbf800000 0xbf800000 0x00000000 
                //        0x3f800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0x3f800000 0x3f800000 0x00000000 
                //        0xbf800000 0x3f800000 0xbf800000 0x00000000 
                //        0xbf800000 0xbf800000 0xbf800000 0x00000000 
                //        0x3f800000 0xbf800000 0xbf800000 0x00000000 
                //        0x3f800000 0x3f800000 0xbf800000 0x00000000 
                //        0x3f800000 0x3f800000 0x3f800000 0x00000000 
                //        0x3f800000 0xbf800000 0x3f800000 
                //   uint indexArray[36];               // Offset:  384 Size:   564
                //      = 0x00000001 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x00000002 0x00000000 0x00000000 0x00000000 
                //        0x00000002 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x00000003 0x00000000 0x00000000 0x00000000 
                //        0x00000005 0x00000000 0x00000000 0x00000000 
                //        0x00000004 0x00000000 0x00000000 0x00000000 
                //        0x00000006 0x00000000 0x00000000 0x00000000 
                //        0x00000006 0x00000000 0x00000000 0x00000000 
                //        0x00000004 0x00000000 0x00000000 0x00000000 
                //        0x00000007 0x00000000 0x00000000 0x00000000 
                //        0x00000009 0x00000000 0x00000000 0x00000000 
                //        0x00000008 0x00000000 0x00000000 0x00000000 
                //        0x0000000a 0x00000000 0x00000000 0x00000000 
                //        0x0000000a 0x00000000 0x00000000 0x00000000 
                //        0x00000008 0x00000000 0x00000000 0x00000000 
                //        0x0000000b 0x00000000 0x00000000 0x00000000 
                //        0x0000000d 0x00000000 0x00000000 0x00000000 
                //        0x0000000c 0x00000000 0x00000000 0x00000000 
                //        0x0000000e 0x00000000 0x00000000 0x00000000 
                //        0x0000000e 0x00000000 0x00000000 0x00000000 
                //        0x0000000c 0x00000000 0x00000000 0x00000000 
                //        0x0000000f 0x00000000 0x00000000 0x00000000 
                //        0x00000011 0x00000000 0x00000000 0x00000000 
                //        0x00000010 0x00000000 0x00000000 0x00000000 
                //        0x00000012 0x00000000 0x00000000 0x00000000 
                //        0x00000012 0x00000000 0x00000000 0x00000000 
                //        0x00000010 0x00000000 0x00000000 0x00000000 
                //        0x00000013 0x00000000 0x00000000 0x00000000 
                //        0x00000015 0x00000000 0x00000000 0x00000000 
                //        0x00000014 0x00000000 0x00000000 0x00000000 
                //        0x00000016 0x00000000 0x00000000 0x00000000 
                //        0x00000016 0x00000000 0x00000000 0x00000000 
                //        0x00000014 0x00000000 0x00000000 0x00000000 
                //        0x00000017 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[60], dynamicIndexed
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vertexId; 
                //   o1.x <- <VSmain return value>.PosL.x; o1.y <- <VSmain return value>.PosL.y; o1.z <- <VSmain return value>.PosL.z; 
                //   o0.x <- <VSmain return value>.PosH.x; o0.y <- <VSmain return value>.PosH.y; o0.z <- <VSmain return value>.PosH.z; o0.w <- <VSmain return value>.PosH.w
                //
                #line 74 "D:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\Skybox.fx"
                mov r0.x, v0.x
                mov r0.x, cb1[r0.x + 24].x
                mov r0.xyz, cb1[r0.x + 0].xyzx  // r0.x <- output.PosL.x; r0.y <- output.PosL.y; r0.z <- output.PosL.z
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- output.PosH.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- output.PosH.y
                dp4 r1.w, r0.xyzw, cb0[3].xyzw
                mov r1.zw, r1.wwww  // r1.z <- output.PosH.z; r1.w <- output.PosH.w
                mov r0.w, l(-0.001000)
                add r0.w, r0.w, r1.z  // r0.w <- output.PosH.z
                mov o0.xyw, r1.xyxw
                mov o0.z, r0.w
                mov o1.xyz, r0.xyzx
                ret 
                // Approximately 14 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samTriLinearSam                   sampler      NA          NA    0        1
                // gCubeMap                          texture  float4        cube    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosL.x; v1.y <- pin.PosL.y; v1.z <- pin.PosL.z; 
                //   o0.x <- <PSmain return value>.x; o0.y <- <PSmain return value>.y; o0.z <- <PSmain return value>.z; o0.w <- <PSmain return value>.w
                //
                #line 86 "D:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\Skybox.fx"
                sample_indexable(texturecube)(float,float,float,float) o0.xyzw, v1.xyzx, t0.xyzw, s0
                ret 
                // Approximately 2 instruction slots used
                            
            };
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NULL;
        }

    }

}

