//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLight;         // Offset:    0, size:   32
    float3  gEyePosW;                   // Offset:   32, size:   12
    float4x4 gProjInv;                  // Offset:   48, size:   64
    float4x4 gProj;                     // Offset:  112, size:   64
    float   gOcclusionRadius = 0.200000003;// Offset:  176, size:    4
    float   gOcclusionFadeStart = 0.100000001;// Offset:  180, size:    4
    float   gOcclusionFadeEnd = 2;      // Offset:  184, size:    4
    float   gSurfaceEpsilon = 0.00499999989;// Offset:  188, size:    4
}

cbuffer cbFixed
{
    float4  vertexArray[6] = { -1, -1, 0, 1, -1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, -1, 0, 1 };// Offset:    0, size:   96
    float2  uvArray[6] = { 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1 };// Offset:   96, size:   88
    float4  OffsetVect[14] = { 1, 1, 1, 0, -1, -1, -1, 0, -1, 1, 1, 0, 1, -1, -1, 0, 1, 1, -1, 0, -1, -1, 1, 0, -1, 1, -1, 0, 1, -1, 1, 0, -1, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0 };// Offset:  192, size:  224
}

cbuffer cbSettings
{
    float   gWeights[21] = { 0.0137570491, 0.0188821685, 0.0250669792, 0.0321866386, 0.0399735533, 0.0480168201, 0.0557875857, 0.0626910105, 0.0681391135, 0.0716326833, 0.072836563, 0.0716326833, 0.0681391135, 0.0626910105, 0.0557875857, 0.0480168201, 0.0399735533, 0.0321866386, 0.0250669792, 0.0188821685, 0.0137570491 };// Offset:    0, size:  324
}

//
// 10 local object(s)
//
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState samNormalDepth
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 100000);
};
Texture2D gScreenMap;
Texture2D gSSAOMap;
Texture2D gDiffuseGB;
Texture2D gPositionGB;
Texture2D gNormalGB;
Texture2D gSpecularGB;
Texture2D gDepthGB;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 5 technique(s)
    //
    technique11 t0
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbFixed
                // {
                //
                //   float4 vertexArray[6];             // Offset:    0 Size:    96
                //      = 0xbf800000 0xbf800000 0x00000000 0x3f800000 
                //        0xbf800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0xbf800000 0x00000000 0x3f800000 
                //        0xbf800000 0xbf800000 0x00000000 0x3f800000 
                //   float2 uvArray[6];                 // Offset:   96 Size:    88
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 
                //   float4 OffsetVect[14];             // Offset:  192 Size:   224 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 0x00000000 
                //        0xbf800000 0xbf800000 0xbf800000 0x00000000 
                //        0xbf800000 0x3f800000 0x3f800000 0x00000000 
                //        0x3f800000 0xbf800000 0xbf800000 0x00000000 
                //        0x3f800000 0x3f800000 0xbf800000 0x00000000 
                //        0xbf800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0x3f800000 0xbf800000 0x00000000 
                //        0x3f800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0xbf800000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0xbf800000 0x00000000 
                //        0x00000000 0x00000000 0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbFixed                           cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], dynamicIndexed
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vertexId; 
                //   o1.x <- <VSmain return value>.Tex.x; o1.y <- <VSmain return value>.Tex.y; 
                //   o0.x <- <VSmain return value>.pos.x; o0.y <- <VSmain return value>.pos.y; o0.z <- <VSmain return value>.pos.z; o0.w <- <VSmain return value>.pos.w
                //
                #line 122 "E:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\ScreenQuad.fx"
                mov r0.x, v0.x
                mov r1.xyzw, cb0[r0.x + 0].xyzw  // r1.x <- output.pos.x; r1.y <- output.pos.y; r1.z <- output.pos.z; r1.w <- output.pos.w
                mov r0.xy, cb0[r0.x + 6].xyxx  // r0.x <- output.Tex.x; r0.y <- output.Tex.y
                mov o0.xyzw, r1.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 6 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 intensity;              // Offset:    0
                //       float3 direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLight;                       // Offset:    0 Size:    32
                //   float3 gEyePosW;                   // Offset:   32 Size:    12
                //   float4x4 gProjInv;                 // Offset:   48 Size:    64
                //   float4x4 gProj;                    // Offset:  112 Size:    64
                //   float gOcclusionRadius;            // Offset:  176 Size:     4
                //      = 0x3e4ccccd 
                //   float gOcclusionFadeStart;         // Offset:  180 Size:     4
                //      = 0x3dcccccd 
                //   float gOcclusionFadeEnd;           // Offset:  184 Size:     4
                //      = 0x40000000 
                //   float gSurfaceEpsilon;             // Offset:  188 Size:     4
                //      = 0x3ba3d70a 
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float4 vertexArray[6];             // Offset:    0 Size:    96 [unused]
                //      = 0xbf800000 0xbf800000 0x00000000 0x3f800000 
                //        0xbf800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0xbf800000 0x00000000 0x3f800000 
                //        0xbf800000 0xbf800000 0x00000000 0x3f800000 
                //   float2 uvArray[6];                 // Offset:   96 Size:    88 [unused]
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 
                //   float4 OffsetVect[14];             // Offset:  192 Size:   224
                //      = 0x3f800000 0x3f800000 0x3f800000 0x00000000 
                //        0xbf800000 0xbf800000 0xbf800000 0x00000000 
                //        0xbf800000 0x3f800000 0x3f800000 0x00000000 
                //        0x3f800000 0xbf800000 0xbf800000 0x00000000 
                //        0x3f800000 0x3f800000 0xbf800000 0x00000000 
                //        0xbf800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0x3f800000 0xbf800000 0x00000000 
                //        0x3f800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0xbf800000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0xbf800000 0x00000000 
                //        0x00000000 0x00000000 0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // samNormalDepth                    sampler      NA          NA    1        1
                // gDiffuseGB                        texture  float4          2d    0        1
                // gNormalGB                         texture  float4          2d    1        1
                // gSpecularGB                       texture  float4          2d    2        1
                // gDepthGB                          texture  float4          2d    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[26], dynamicIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- input.pos.x; v0.y <- input.pos.y; v0.z <- input.pos.z; v0.w <- input.pos.w; 
                //   v1.x <- input.Tex.x; v1.y <- input.Tex.y; 
                //   o1.x <- <PSmain return value>.SSAO.x; o1.y <- <PSmain return value>.SSAO.y; o1.z <- <PSmain return value>.SSAO.z; o1.w <- <PSmain return value>.SSAO.w; 
                //   o0.x <- <PSmain return value>.DeferredShade.x; o0.y <- <PSmain return value>.DeferredShade.y; o0.z <- <PSmain return value>.DeferredShade.z; o0.w <- <PSmain return value>.DeferredShade.w
                //
                #line 275 "E:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\ScreenQuad.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t3.yzxw, s0
                mov r0.z, r0.z  // r0.z <- z
                itof r1.x, l(2)
                mul r1.x, r1.x, v1.x
                itof r1.y, l(1)
                mov r1.y, -r1.y
                add r0.x, r1.y, r1.x  // r0.x <- x
                itof r1.x, l(1)
                mov r1.y, -v1.y
                add r1.x, r1.y, r1.x
                itof r1.y, l(2)
                mul r1.x, r1.y, r1.x
                itof r1.y, l(1)
                mov r1.y, -r1.y
                add r0.y, r1.y, r1.x  // r0.y <- y
                mov r0.w, l(1.000000)
                mov r0.xyzw, r0.xyzw  // r0.x <- vProjectedPos.x; r0.y <- vProjectedPos.y; r0.z <- vProjectedPos.z; r0.w <- vProjectedPos.w
                dp4 r1.x, r0.xyzw, cb0[3].xyzw  // r1.x <- vPositionVS.x
                dp4 r1.y, r0.xyzw, cb0[4].xyzw  // r1.y <- vPositionVS.y
                dp4 r1.z, r0.xyzw, cb0[5].xyzw  // r1.z <- vPositionVS.z
                dp4 r0.x, r0.xyzw, cb0[6].xyzw  // r0.x <- vPositionVS.w
                div r0.xyz, r1.xyzx, r0.xxxx  // r0.x <- vPositionVS.x; r0.y <- vPositionVS.y; r0.z <- vPositionVS.z
                
                #line 288
                itof r0.w, l(1000)
                mov r1.x, -r0.z
                add r0.w, r0.w, r1.x
                itof r1.x, l(1)
                mov r1.x, -r1.x
                add r0.w, r0.w, r1.x
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 291
                itof r1.xyzw, l(0, 0, 0, 0)  // r1.x <- diffColor.x; r1.y <- diffColor.y; r1.z <- diffColor.z; r1.w <- diffColor.w
                itof r2.xyzw, l(0, 0, 0, 0)  // r2.x <- specColor.x; r2.y <- specColor.y; r2.z <- specColor.z; r2.w <- specColor.w
                
                #line 295
                sample_indexable(texture2d)(float,float,float,float) r3.xy, v1.xyxx, t1.xyzw, s0
                mov r3.xy, r3.xyxx  // r3.x <- normalV.x; r3.y <- normalV.y
                itof r0.w, l(1)
                dp2 r3.w, r3.xyxx, r3.xyxx
                mov r3.w, -r3.w
                add r0.w, r0.w, r3.w
                sqrt r0.w, r0.w
                mov r3.z, -r0.w  // r3.z <- normalV.z
                
                #line 300
                mov r4.xyz, -cb0[1].xyzx
                dp3 r0.w, r4.xyzx, r3.xyzx  // r0.w <- diffuseK
                sample_indexable(texture2d)(float,float,float,float) r3.w, v1.xyxx, t0.xyzw, s0
                mov r3.w, r3.w  // r3.w <- shadowLit
                itof r4.x, l(0)
                lt r4.x, r4.x, r0.w
                if_nz r4.x
                  mul r4.xyzw, r0.wwww, cb0[0].xyzw
                  add r1.xyzw, r1.xyzw, r4.xyzw
                  dp3 r0.w, cb0[1].xyzx, r3.xyzx
                  add r0.w, r0.w, r0.w
                  mov r0.w, -r0.w
                  mul r4.xyz, r0.wwww, r3.xyzx
                  add r4.xyz, r4.xyzx, cb0[1].xyzx  // r4.x <- refLight.x; r4.y <- refLight.y; r4.z <- refLight.z
                  mov r5.xyz, -r0.xyzx
                  add r5.xyz, r5.xyzx, cb0[2].xyzx  // r5.x <- viewRay.x; r5.y <- viewRay.y; r5.z <- viewRay.z
                  dp3 r0.w, r5.xyzx, r5.xyzx
                  rsq r0.w, r0.w
                  mul r5.xyz, r0.wwww, r5.xyzx
                  sample_indexable(texture2d)(float,float,float,float) r6.xyzw, v1.xyxx, t2.xyzw, s0
                  dp3 r0.w, r4.xyzx, r5.xyzx
                  itof r4.x, l(0)
                  max r0.w, r0.w, r4.x
                  sample_indexable(texture2d)(float,float,float,float) r4.x, v1.xyxx, t2.wxyz, s0
                  mul r4.x, r4.x, l(255.000000)
                  log r0.w, r0.w
                  mul r0.w, r0.w, r4.x
                  exp r0.w, r0.w
                  mul r4.xyzw, r0.wwww, r6.xyzw
                  add r2.xyzw, r2.xyzw, r4.xyzw
                endif 
                
                #line 311
                itof r4.w, l(0)
                mul r1.xyzw, r3.wwww, r1.xyzw
                mov r4.xyz, l(0.200000,0.200000,0.200000,0)
                add r1.xyzw, r1.xyzw, r4.xyzw
                sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v1.xyxx, t0.xyzw, s0
                mul r1.xyzw, r1.xyzw, r4.xyzw
                mul r2.xyzw, r3.wwww, r2.xyzw
                add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- pOut.DeferredShade.x; r1.y <- pOut.DeferredShade.y; r1.z <- pOut.DeferredShade.z; r1.w <- pOut.DeferredShade.w
                
                #line 315
                mov r0.w, l(0)  // r0.w <- occlusionSum
                mov r2.x, l(0)  // r2.x <- i
                mov r2.y, r0.w  // r2.y <- occlusionSum
                mov r2.z, r2.x  // r2.z <- i
                loop 
                  ilt r2.w, r2.z, l(14)
                  breakc_z r2.w
                  dp3 r2.w, cb1[r2.z + 12].xyzx, cb1[r2.z + 12].xyzx
                  rsq r2.w, r2.w
                  mul r4.xyz, r2.wwww, cb1[r2.z + 12].xyzx  // r4.x <- offset.x; r4.y <- offset.y; r4.z <- offset.z
                  mov r2.w, l(1.000000)  // r2.w <- flip
                  mul r2.w, r2.w, cb0[11].x
                  mul r4.xyz, r4.xyzx, r2.wwww
                  add r4.xyz, r0.xyzx, r4.xyzx  // r4.x <- qV.x; r4.y <- qV.y; r4.z <- qV.z
                  mov r4.w, l(1.000000)
                  dp4 r5.x, r4.xyzw, cb0[7].xyzw  // r5.x <- projQ.x
                  dp4 r5.y, r4.xyzw, cb0[8].xyzw  // r5.y <- projQ.y
                  dp4 r2.w, r4.xyzw, cb0[10].xyzw  // r2.w <- projQ.w
                
                #line 326
                  div r4.xy, r5.xyxx, r2.wwww  // r4.x <- projQ.x; r4.y <- projQ.y
                  mul r2.w, r4.x, l(0.500000)
                  add r5.x, r2.w, l(0.500000)
                  mul r2.w, r4.y, l(0.500000)
                  mov r2.w, -r2.w
                  add r5.y, r2.w, l(0.500000)
                  sample_indexable(texture2d)(float,float,float,float) r4.z, r5.xyxx, t3.yzxw, s1
                  mov r4.z, r4.z  // r4.z <- rz
                  mov r4.w, l(1.000000)
                  mov r4.xyzw, r4.xyzw  // r4.x <- rProjectedPos.x; r4.y <- rProjectedPos.y; r4.z <- rProjectedPos.z; r4.w <- rProjectedPos.w
                  dp4 r5.x, r4.xyzw, cb0[3].xyzw  // r5.x <- rPositionVS.x
                  dp4 r5.y, r4.xyzw, cb0[4].xyzw  // r5.y <- rPositionVS.y
                  dp4 r5.z, r4.xyzw, cb0[5].xyzw  // r5.z <- rPositionVS.z
                  dp4 r2.w, r4.xyzw, cb0[6].xyzw  // r2.w <- rPositionVS.w
                  div r4.xyz, r5.xyzx, r2.wwww  // r4.x <- rPositionVS.x; r4.y <- rPositionVS.y; r4.z <- rPositionVS.z
                
                #line 334
                  mov r2.w, -r4.z
                  add r2.w, r0.z, r2.w  // r2.w <- distZ
                  mov r5.xyz, -r0.xyzx
                  add r4.xyz, r4.xyzx, r5.xyzx
                  dp3 r3.w, r4.xyzx, r4.xyzx
                  rsq r3.w, r3.w
                  mul r4.xyz, r3.wwww, r4.xyzx
                  dp3 r3.w, r3.xyzx, r4.xyzx
                  max r3.w, r3.w, l(0.000000)  // r3.w <- dp
                  nop 
                  mov r2.w, r2.w
                
                #line 155
                  mov r4.x, l(0)  // r4.x <- occlusion
                  lt r4.y, cb0[11].w, r2.w
                  if_nz r4.y
                    mov r4.y, -cb0[11].y
                    add r4.y, r4.y, cb0[11].z  // r4.y <- fadeLength
                
                #line 162
                    mov r2.w, -r2.w
                    add r2.w, r2.w, cb0[11].z
                    div r2.w, r2.w, r4.y
                    max r2.w, r2.w, l(0.000000)
                    min r4.x, r2.w, l(1.000000)
                  endif 
                  mov r4.x, r4.x  // r4.x <- <OcclusionFunction return value>
                
                #line 336
                  mul r2.w, r3.w, r4.x  // r2.w <- occlusion
                  add r2.y, r2.w, r2.y
                  iadd r2.z, r2.z, l(1)
                endloop 
                div r0.x, r2.y, l(14.000000)  // r0.x <- occlusionSum
                mov r0.x, -r0.x
                add r0.x, r0.x, l(1.000000)  // r0.x <- access
                
                #line 346
                mov r0.y, l(1.000000)
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.y
                max r0.x, r0.x, l(0.000000)
                min r0.xyzw, r0.xxxx, l(1.000000, 1.000000, 1.000000, 1.000000)  // r0.x <- pOut.SSAO.x; r0.y <- pOut.SSAO.y; r0.z <- pOut.SSAO.z; r0.w <- pOut.SSAO.w
                mov o0.xyzw, r1.xyzw
                mov o1.xyzw, r0.xyzw
                ret 
                // Approximately 152 instruction slots used
                            
            };
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NULL;
        }

    }

    technique11 DeferredLightingTech
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbFixed
                // {
                //
                //   float4 vertexArray[6];             // Offset:    0 Size:    96
                //      = 0xbf800000 0xbf800000 0x00000000 0x3f800000 
                //        0xbf800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0xbf800000 0x00000000 0x3f800000 
                //        0xbf800000 0xbf800000 0x00000000 0x3f800000 
                //   float2 uvArray[6];                 // Offset:   96 Size:    88
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 
                //   float4 OffsetVect[14];             // Offset:  192 Size:   224 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 0x00000000 
                //        0xbf800000 0xbf800000 0xbf800000 0x00000000 
                //        0xbf800000 0x3f800000 0x3f800000 0x00000000 
                //        0x3f800000 0xbf800000 0xbf800000 0x00000000 
                //        0x3f800000 0x3f800000 0xbf800000 0x00000000 
                //        0xbf800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0x3f800000 0xbf800000 0x00000000 
                //        0x3f800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0xbf800000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0xbf800000 0x00000000 
                //        0x00000000 0x00000000 0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbFixed                           cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], dynamicIndexed
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vertexId; 
                //   o1.x <- <VSmain return value>.Tex.x; o1.y <- <VSmain return value>.Tex.y; 
                //   o0.x <- <VSmain return value>.pos.x; o0.y <- <VSmain return value>.pos.y; o0.z <- <VSmain return value>.pos.z; o0.w <- <VSmain return value>.pos.w
                //
                #line 122 "E:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\ScreenQuad.fx"
                mov r0.x, v0.x
                mov r1.xyzw, cb0[r0.x + 0].xyzw  // r1.x <- output.pos.x; r1.y <- output.pos.y; r1.z <- output.pos.z; r1.w <- output.pos.w
                mov r0.xy, cb0[r0.x + 6].xyxx  // r0.x <- output.Tex.x; r0.y <- output.Tex.y
                mov o0.xyzw, r1.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 6 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 intensity;              // Offset:    0
                //       float3 direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLight;                       // Offset:    0 Size:    32
                //   float3 gEyePosW;                   // Offset:   32 Size:    12
                //   float4x4 gProjInv;                 // Offset:   48 Size:    64
                //   float4x4 gProj;                    // Offset:  112 Size:    64
                //   float gOcclusionRadius;            // Offset:  176 Size:     4
                //      = 0x3e4ccccd 
                //   float gOcclusionFadeStart;         // Offset:  180 Size:     4
                //      = 0x3dcccccd 
                //   float gOcclusionFadeEnd;           // Offset:  184 Size:     4
                //      = 0x40000000 
                //   float gSurfaceEpsilon;             // Offset:  188 Size:     4
                //      = 0x3ba3d70a 
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float4 vertexArray[6];             // Offset:    0 Size:    96 [unused]
                //      = 0xbf800000 0xbf800000 0x00000000 0x3f800000 
                //        0xbf800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0xbf800000 0x00000000 0x3f800000 
                //        0xbf800000 0xbf800000 0x00000000 0x3f800000 
                //   float2 uvArray[6];                 // Offset:   96 Size:    88 [unused]
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 
                //   float4 OffsetVect[14];             // Offset:  192 Size:   224
                //      = 0x3f800000 0x3f800000 0x3f800000 0x00000000 
                //        0xbf800000 0xbf800000 0xbf800000 0x00000000 
                //        0xbf800000 0x3f800000 0x3f800000 0x00000000 
                //        0x3f800000 0xbf800000 0xbf800000 0x00000000 
                //        0x3f800000 0x3f800000 0xbf800000 0x00000000 
                //        0xbf800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0x3f800000 0xbf800000 0x00000000 
                //        0x3f800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0xbf800000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0xbf800000 0x00000000 
                //        0x00000000 0x00000000 0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // samNormalDepth                    sampler      NA          NA    1        1
                // gDiffuseGB                        texture  float4          2d    0        1
                // gNormalGB                         texture  float4          2d    1        1
                // gSpecularGB                       texture  float4          2d    2        1
                // gDepthGB                          texture  float4          2d    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                // SV_TARGET                1   xyzw        1   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[26], dynamicIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_output o1.xyzw
                dcl_temps 7
                //
                // Initial variable locations:
                //   v0.x <- input.pos.x; v0.y <- input.pos.y; v0.z <- input.pos.z; v0.w <- input.pos.w; 
                //   v1.x <- input.Tex.x; v1.y <- input.Tex.y; 
                //   o1.x <- <PSmain return value>.SSAO.x; o1.y <- <PSmain return value>.SSAO.y; o1.z <- <PSmain return value>.SSAO.z; o1.w <- <PSmain return value>.SSAO.w; 
                //   o0.x <- <PSmain return value>.DeferredShade.x; o0.y <- <PSmain return value>.DeferredShade.y; o0.z <- <PSmain return value>.DeferredShade.z; o0.w <- <PSmain return value>.DeferredShade.w
                //
                #line 275 "E:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\ScreenQuad.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t3.yzxw, s0
                mov r0.z, r0.z  // r0.z <- z
                itof r1.x, l(2)
                mul r1.x, r1.x, v1.x
                itof r1.y, l(1)
                mov r1.y, -r1.y
                add r0.x, r1.y, r1.x  // r0.x <- x
                itof r1.x, l(1)
                mov r1.y, -v1.y
                add r1.x, r1.y, r1.x
                itof r1.y, l(2)
                mul r1.x, r1.y, r1.x
                itof r1.y, l(1)
                mov r1.y, -r1.y
                add r0.y, r1.y, r1.x  // r0.y <- y
                mov r0.w, l(1.000000)
                mov r0.xyzw, r0.xyzw  // r0.x <- vProjectedPos.x; r0.y <- vProjectedPos.y; r0.z <- vProjectedPos.z; r0.w <- vProjectedPos.w
                dp4 r1.x, r0.xyzw, cb0[3].xyzw  // r1.x <- vPositionVS.x
                dp4 r1.y, r0.xyzw, cb0[4].xyzw  // r1.y <- vPositionVS.y
                dp4 r1.z, r0.xyzw, cb0[5].xyzw  // r1.z <- vPositionVS.z
                dp4 r0.x, r0.xyzw, cb0[6].xyzw  // r0.x <- vPositionVS.w
                div r0.xyz, r1.xyzx, r0.xxxx  // r0.x <- vPositionVS.x; r0.y <- vPositionVS.y; r0.z <- vPositionVS.z
                
                #line 288
                itof r0.w, l(1000)
                mov r1.x, -r0.z
                add r0.w, r0.w, r1.x
                itof r1.x, l(1)
                mov r1.x, -r1.x
                add r0.w, r0.w, r1.x
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 291
                itof r1.xyzw, l(0, 0, 0, 0)  // r1.x <- diffColor.x; r1.y <- diffColor.y; r1.z <- diffColor.z; r1.w <- diffColor.w
                itof r2.xyzw, l(0, 0, 0, 0)  // r2.x <- specColor.x; r2.y <- specColor.y; r2.z <- specColor.z; r2.w <- specColor.w
                
                #line 295
                sample_indexable(texture2d)(float,float,float,float) r3.xy, v1.xyxx, t1.xyzw, s0
                mov r3.xy, r3.xyxx  // r3.x <- normalV.x; r3.y <- normalV.y
                itof r0.w, l(1)
                dp2 r3.w, r3.xyxx, r3.xyxx
                mov r3.w, -r3.w
                add r0.w, r0.w, r3.w
                sqrt r0.w, r0.w
                mov r3.z, -r0.w  // r3.z <- normalV.z
                
                #line 300
                mov r4.xyz, -cb0[1].xyzx
                dp3 r0.w, r4.xyzx, r3.xyzx  // r0.w <- diffuseK
                sample_indexable(texture2d)(float,float,float,float) r3.w, v1.xyxx, t0.xyzw, s0
                mov r3.w, r3.w  // r3.w <- shadowLit
                itof r4.x, l(0)
                lt r4.x, r4.x, r0.w
                if_nz r4.x
                  mul r4.xyzw, r0.wwww, cb0[0].xyzw
                  add r1.xyzw, r1.xyzw, r4.xyzw
                  dp3 r0.w, cb0[1].xyzx, r3.xyzx
                  add r0.w, r0.w, r0.w
                  mov r0.w, -r0.w
                  mul r4.xyz, r0.wwww, r3.xyzx
                  add r4.xyz, r4.xyzx, cb0[1].xyzx  // r4.x <- refLight.x; r4.y <- refLight.y; r4.z <- refLight.z
                  mov r5.xyz, -r0.xyzx
                  add r5.xyz, r5.xyzx, cb0[2].xyzx  // r5.x <- viewRay.x; r5.y <- viewRay.y; r5.z <- viewRay.z
                  dp3 r0.w, r5.xyzx, r5.xyzx
                  rsq r0.w, r0.w
                  mul r5.xyz, r0.wwww, r5.xyzx
                  sample_indexable(texture2d)(float,float,float,float) r6.xyzw, v1.xyxx, t2.xyzw, s0
                  dp3 r0.w, r4.xyzx, r5.xyzx
                  itof r4.x, l(0)
                  max r0.w, r0.w, r4.x
                  sample_indexable(texture2d)(float,float,float,float) r4.x, v1.xyxx, t2.wxyz, s0
                  mul r4.x, r4.x, l(255.000000)
                  log r0.w, r0.w
                  mul r0.w, r0.w, r4.x
                  exp r0.w, r0.w
                  mul r4.xyzw, r0.wwww, r6.xyzw
                  add r2.xyzw, r2.xyzw, r4.xyzw
                endif 
                
                #line 311
                itof r4.w, l(0)
                mul r1.xyzw, r3.wwww, r1.xyzw
                mov r4.xyz, l(0.200000,0.200000,0.200000,0)
                add r1.xyzw, r1.xyzw, r4.xyzw
                sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v1.xyxx, t0.xyzw, s0
                mul r1.xyzw, r1.xyzw, r4.xyzw
                mul r2.xyzw, r3.wwww, r2.xyzw
                add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- pOut.DeferredShade.x; r1.y <- pOut.DeferredShade.y; r1.z <- pOut.DeferredShade.z; r1.w <- pOut.DeferredShade.w
                
                #line 315
                mov r0.w, l(0)  // r0.w <- occlusionSum
                mov r2.x, l(0)  // r2.x <- i
                mov r2.y, r0.w  // r2.y <- occlusionSum
                mov r2.z, r2.x  // r2.z <- i
                loop 
                  ilt r2.w, r2.z, l(14)
                  breakc_z r2.w
                  dp3 r2.w, cb1[r2.z + 12].xyzx, cb1[r2.z + 12].xyzx
                  rsq r2.w, r2.w
                  mul r4.xyz, r2.wwww, cb1[r2.z + 12].xyzx  // r4.x <- offset.x; r4.y <- offset.y; r4.z <- offset.z
                  mov r2.w, l(1.000000)  // r2.w <- flip
                  mul r2.w, r2.w, cb0[11].x
                  mul r4.xyz, r4.xyzx, r2.wwww
                  add r4.xyz, r0.xyzx, r4.xyzx  // r4.x <- qV.x; r4.y <- qV.y; r4.z <- qV.z
                  mov r4.w, l(1.000000)
                  dp4 r5.x, r4.xyzw, cb0[7].xyzw  // r5.x <- projQ.x
                  dp4 r5.y, r4.xyzw, cb0[8].xyzw  // r5.y <- projQ.y
                  dp4 r2.w, r4.xyzw, cb0[10].xyzw  // r2.w <- projQ.w
                
                #line 326
                  div r4.xy, r5.xyxx, r2.wwww  // r4.x <- projQ.x; r4.y <- projQ.y
                  mul r2.w, r4.x, l(0.500000)
                  add r5.x, r2.w, l(0.500000)
                  mul r2.w, r4.y, l(0.500000)
                  mov r2.w, -r2.w
                  add r5.y, r2.w, l(0.500000)
                  sample_indexable(texture2d)(float,float,float,float) r4.z, r5.xyxx, t3.yzxw, s1
                  mov r4.z, r4.z  // r4.z <- rz
                  mov r4.w, l(1.000000)
                  mov r4.xyzw, r4.xyzw  // r4.x <- rProjectedPos.x; r4.y <- rProjectedPos.y; r4.z <- rProjectedPos.z; r4.w <- rProjectedPos.w
                  dp4 r5.x, r4.xyzw, cb0[3].xyzw  // r5.x <- rPositionVS.x
                  dp4 r5.y, r4.xyzw, cb0[4].xyzw  // r5.y <- rPositionVS.y
                  dp4 r5.z, r4.xyzw, cb0[5].xyzw  // r5.z <- rPositionVS.z
                  dp4 r2.w, r4.xyzw, cb0[6].xyzw  // r2.w <- rPositionVS.w
                  div r4.xyz, r5.xyzx, r2.wwww  // r4.x <- rPositionVS.x; r4.y <- rPositionVS.y; r4.z <- rPositionVS.z
                
                #line 334
                  mov r2.w, -r4.z
                  add r2.w, r0.z, r2.w  // r2.w <- distZ
                  mov r5.xyz, -r0.xyzx
                  add r4.xyz, r4.xyzx, r5.xyzx
                  dp3 r3.w, r4.xyzx, r4.xyzx
                  rsq r3.w, r3.w
                  mul r4.xyz, r3.wwww, r4.xyzx
                  dp3 r3.w, r3.xyzx, r4.xyzx
                  max r3.w, r3.w, l(0.000000)  // r3.w <- dp
                  nop 
                  mov r2.w, r2.w
                
                #line 155
                  mov r4.x, l(0)  // r4.x <- occlusion
                  lt r4.y, cb0[11].w, r2.w
                  if_nz r4.y
                    mov r4.y, -cb0[11].y
                    add r4.y, r4.y, cb0[11].z  // r4.y <- fadeLength
                
                #line 162
                    mov r2.w, -r2.w
                    add r2.w, r2.w, cb0[11].z
                    div r2.w, r2.w, r4.y
                    max r2.w, r2.w, l(0.000000)
                    min r4.x, r2.w, l(1.000000)
                  endif 
                  mov r4.x, r4.x  // r4.x <- <OcclusionFunction return value>
                
                #line 336
                  mul r2.w, r3.w, r4.x  // r2.w <- occlusion
                  add r2.y, r2.w, r2.y
                  iadd r2.z, r2.z, l(1)
                endloop 
                div r0.x, r2.y, l(14.000000)  // r0.x <- occlusionSum
                mov r0.x, -r0.x
                add r0.x, r0.x, l(1.000000)  // r0.x <- access
                
                #line 346
                mov r0.y, l(1.000000)
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.y
                max r0.x, r0.x, l(0.000000)
                min r0.xyzw, r0.xxxx, l(1.000000, 1.000000, 1.000000, 1.000000)  // r0.x <- pOut.SSAO.x; r0.y <- pOut.SSAO.y; r0.z <- pOut.SSAO.z; r0.w <- pOut.SSAO.w
                mov o0.xyzw, r1.xyzw
                mov o1.xyzw, r0.xyzw
                ret 
                // Approximately 152 instruction slots used
                            
            };
        }

    }

    technique11 SSAOTech
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbFixed
                // {
                //
                //   float4 vertexArray[6];             // Offset:    0 Size:    96
                //      = 0xbf800000 0xbf800000 0x00000000 0x3f800000 
                //        0xbf800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0xbf800000 0x00000000 0x3f800000 
                //        0xbf800000 0xbf800000 0x00000000 0x3f800000 
                //   float2 uvArray[6];                 // Offset:   96 Size:    88
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 
                //   float4 OffsetVect[14];             // Offset:  192 Size:   224 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 0x00000000 
                //        0xbf800000 0xbf800000 0xbf800000 0x00000000 
                //        0xbf800000 0x3f800000 0x3f800000 0x00000000 
                //        0x3f800000 0xbf800000 0xbf800000 0x00000000 
                //        0x3f800000 0x3f800000 0xbf800000 0x00000000 
                //        0xbf800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0x3f800000 0xbf800000 0x00000000 
                //        0x3f800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0xbf800000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0xbf800000 0x00000000 
                //        0x00000000 0x00000000 0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbFixed                           cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], dynamicIndexed
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vertexId; 
                //   o1.x <- <VSmain return value>.Tex.x; o1.y <- <VSmain return value>.Tex.y; 
                //   o0.x <- <VSmain return value>.pos.x; o0.y <- <VSmain return value>.pos.y; o0.z <- <VSmain return value>.pos.z; o0.w <- <VSmain return value>.pos.w
                //
                #line 122 "E:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\ScreenQuad.fx"
                mov r0.x, v0.x
                mov r1.xyzw, cb0[r0.x + 0].xyzw  // r1.x <- output.pos.x; r1.y <- output.pos.y; r1.z <- output.pos.z; r1.w <- output.pos.w
                mov r0.xy, cb0[r0.x + 6].xyxx  // r0.x <- output.Tex.x; r0.y <- output.Tex.y
                mov o0.xyzw, r1.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 6 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 intensity;              // Offset:    0
                //       float3 direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLight;                       // Offset:    0 Size:    32 [unused]
                //   float3 gEyePosW;                   // Offset:   32 Size:    12 [unused]
                //   float4x4 gProjInv;                 // Offset:   48 Size:    64
                //   float4x4 gProj;                    // Offset:  112 Size:    64
                //   float gOcclusionRadius;            // Offset:  176 Size:     4
                //      = 0x3e4ccccd 
                //   float gOcclusionFadeStart;         // Offset:  180 Size:     4
                //      = 0x3dcccccd 
                //   float gOcclusionFadeEnd;           // Offset:  184 Size:     4
                //      = 0x40000000 
                //   float gSurfaceEpsilon;             // Offset:  188 Size:     4
                //      = 0x3ba3d70a 
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float4 vertexArray[6];             // Offset:    0 Size:    96 [unused]
                //      = 0xbf800000 0xbf800000 0x00000000 0x3f800000 
                //        0xbf800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0xbf800000 0x00000000 0x3f800000 
                //        0xbf800000 0xbf800000 0x00000000 0x3f800000 
                //   float2 uvArray[6];                 // Offset:   96 Size:    88 [unused]
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 
                //   float4 OffsetVect[14];             // Offset:  192 Size:   224
                //      = 0x3f800000 0x3f800000 0x3f800000 0x00000000 
                //        0xbf800000 0xbf800000 0xbf800000 0x00000000 
                //        0xbf800000 0x3f800000 0x3f800000 0x00000000 
                //        0x3f800000 0xbf800000 0xbf800000 0x00000000 
                //        0x3f800000 0x3f800000 0xbf800000 0x00000000 
                //        0xbf800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0x3f800000 0xbf800000 0x00000000 
                //        0x3f800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0xbf800000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0xbf800000 0x00000000 
                //        0x00000000 0x00000000 0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samNormalDepth                    sampler      NA          NA    0        1
                // gNormalGB                         texture  float4          2d    0        1
                // gDepthGB                          texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb1[26], dynamicIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.pos.x; v0.y <- input.pos.y; v0.z <- input.pos.z; v0.w <- input.pos.w; 
                //   v1.x <- input.Tex.x; v1.y <- input.Tex.y; 
                //   o0.x <- <PSSSAOmain return value>.x; o0.y <- <PSSSAOmain return value>.y; o0.z <- <PSSSAOmain return value>.z; o0.w <- <PSSSAOmain return value>.w
                //
                #line 170 "E:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\ScreenQuad.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t1.yzxw, s0
                mov r0.z, r0.z  // r0.z <- z
                itof r1.x, l(2)
                mul r1.x, r1.x, v1.x
                itof r1.y, l(1)
                mov r1.y, -r1.y
                add r0.x, r1.y, r1.x  // r0.x <- x
                itof r1.x, l(1)
                mov r1.y, -v1.y
                add r1.x, r1.y, r1.x
                itof r1.y, l(2)
                mul r1.x, r1.y, r1.x
                itof r1.y, l(1)
                mov r1.y, -r1.y
                add r0.y, r1.y, r1.x  // r0.y <- y
                mov r0.w, l(1.000000)
                mov r0.xyzw, r0.xyzw  // r0.x <- vProjectedPos.x; r0.y <- vProjectedPos.y; r0.z <- vProjectedPos.z; r0.w <- vProjectedPos.w
                dp4 r1.x, r0.xyzw, cb0[3].xyzw  // r1.x <- vPositionVS.x
                dp4 r1.y, r0.xyzw, cb0[4].xyzw  // r1.y <- vPositionVS.y
                dp4 r1.z, r0.xyzw, cb0[5].xyzw  // r1.z <- vPositionVS.z
                dp4 r0.x, r0.xyzw, cb0[6].xyzw  // r0.x <- vPositionVS.w
                div r0.xyz, r1.xyzx, r0.xxxx  // r0.x <- vPositionVS.x; r0.y <- vPositionVS.y; r0.z <- vPositionVS.z
                
                #line 181
                sample_indexable(texture2d)(float,float,float,float) r1.xy, v1.xyxx, t0.xyzw, s0
                mov r1.xy, r1.xyxx  // r1.x <- normalV.x; r1.y <- normalV.y
                itof r0.w, l(1)
                dp2 r1.w, r1.xyxx, r1.xyxx
                mov r1.w, -r1.w
                add r0.w, r0.w, r1.w
                sqrt r0.w, r0.w
                mov r1.z, -r0.w  // r1.z <- normalV.z
                
                #line 185
                mov r0.w, l(0)  // r0.w <- occlusionSum
                mov r1.w, l(0)  // r1.w <- i
                mov r2.x, r0.w  // r2.x <- occlusionSum
                mov r2.y, r1.w  // r2.y <- i
                loop 
                  ilt r2.z, r2.y, l(14)
                  breakc_z r2.z
                  dp3 r2.z, cb1[r2.y + 12].xyzx, cb1[r2.y + 12].xyzx
                  rsq r2.z, r2.z
                  mul r3.xyz, r2.zzzz, cb1[r2.y + 12].xyzx  // r3.x <- offset.x; r3.y <- offset.y; r3.z <- offset.z
                  mov r2.z, l(1.000000)  // r2.z <- flip
                  mul r2.z, r2.z, cb0[11].x
                  mul r3.xyz, r3.xyzx, r2.zzzz
                  add r3.xyz, r0.xyzx, r3.xyzx  // r3.x <- qV.x; r3.y <- qV.y; r3.z <- qV.z
                  mov r3.w, l(1.000000)
                  dp4 r4.x, r3.xyzw, cb0[7].xyzw  // r4.x <- projQ.x
                  dp4 r4.y, r3.xyzw, cb0[8].xyzw  // r4.y <- projQ.y
                  dp4 r2.z, r3.xyzw, cb0[10].xyzw  // r2.z <- projQ.w
                
                #line 196
                  div r3.xy, r4.xyxx, r2.zzzz  // r3.x <- projQ.x; r3.y <- projQ.y
                  mul r2.z, r3.x, l(0.500000)
                  add r4.x, r2.z, l(0.500000)
                  mul r2.z, r3.y, l(0.500000)
                  mov r2.z, -r2.z
                  add r4.y, r2.z, l(0.500000)
                  sample_indexable(texture2d)(float,float,float,float) r3.z, r4.xyxx, t1.yzxw, s0
                  mov r3.z, r3.z  // r3.z <- rz
                  mov r3.w, l(1.000000)
                  mov r3.xyzw, r3.xyzw  // r3.x <- rProjectedPos.x; r3.y <- rProjectedPos.y; r3.z <- rProjectedPos.z; r3.w <- rProjectedPos.w
                  dp4 r4.x, r3.xyzw, cb0[3].xyzw  // r4.x <- rPositionVS.x
                  dp4 r4.y, r3.xyzw, cb0[4].xyzw  // r4.y <- rPositionVS.y
                  dp4 r4.z, r3.xyzw, cb0[5].xyzw  // r4.z <- rPositionVS.z
                  dp4 r2.z, r3.xyzw, cb0[6].xyzw  // r2.z <- rPositionVS.w
                  div r3.xyz, r4.xyzx, r2.zzzz  // r3.x <- rPositionVS.x; r3.y <- rPositionVS.y; r3.z <- rPositionVS.z
                
                #line 204
                  mov r2.z, -r3.z
                  add r2.z, r0.z, r2.z  // r2.z <- distZ
                  mov r4.xyz, -r0.xyzx
                  add r3.xyz, r3.xyzx, r4.xyzx
                  dp3 r2.w, r3.xyzx, r3.xyzx
                  rsq r2.w, r2.w
                  mul r3.xyz, r2.wwww, r3.xyzx
                  dp3 r2.w, r1.xyzx, r3.xyzx
                  max r2.w, r2.w, l(0.000000)  // r2.w <- dp
                  nop 
                  mov r2.z, r2.z
                
                #line 155
                  mov r3.x, l(0)  // r3.x <- occlusion
                  lt r3.y, cb0[11].w, r2.z
                  if_nz r3.y
                    mov r3.y, -cb0[11].y
                    add r3.y, r3.y, cb0[11].z  // r3.y <- fadeLength
                
                #line 162
                    mov r2.z, -r2.z
                    add r2.z, r2.z, cb0[11].z
                    div r2.z, r2.z, r3.y
                    max r2.z, r2.z, l(0.000000)
                    min r3.x, r2.z, l(1.000000)
                  endif 
                  mov r3.x, r3.x  // r3.x <- <OcclusionFunction return value>
                
                #line 206
                  mul r2.z, r2.w, r3.x  // r2.z <- occlusion
                  add r2.x, r2.z, r2.x
                  iadd r2.y, r2.y, l(1)
                endloop 
                div r0.x, r2.x, l(14.000000)  // r0.x <- occlusionSum
                mov r0.x, -r0.x
                add r0.x, r0.x, l(1.000000)  // r0.x <- access
                
                #line 216
                mov r0.y, l(1.000000)
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.y
                max r0.x, r0.x, l(0.000000)
                min o0.xyzw, r0.xxxx, l(1.000000, 1.000000, 1.000000, 1.000000)
                ret 
                // Approximately 100 instruction slots used
                            
            };
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NULL;
        }

    }

    technique11 HBlurTech
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbFixed
                // {
                //
                //   float4 vertexArray[6];             // Offset:    0 Size:    96
                //      = 0xbf800000 0xbf800000 0x00000000 0x3f800000 
                //        0xbf800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0xbf800000 0x00000000 0x3f800000 
                //        0xbf800000 0xbf800000 0x00000000 0x3f800000 
                //   float2 uvArray[6];                 // Offset:   96 Size:    88
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 
                //   float4 OffsetVect[14];             // Offset:  192 Size:   224 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 0x00000000 
                //        0xbf800000 0xbf800000 0xbf800000 0x00000000 
                //        0xbf800000 0x3f800000 0x3f800000 0x00000000 
                //        0x3f800000 0xbf800000 0xbf800000 0x00000000 
                //        0x3f800000 0x3f800000 0xbf800000 0x00000000 
                //        0xbf800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0x3f800000 0xbf800000 0x00000000 
                //        0x3f800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0xbf800000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0xbf800000 0x00000000 
                //        0x00000000 0x00000000 0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbFixed                           cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], dynamicIndexed
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vertexId; 
                //   o1.x <- <VSmain return value>.Tex.x; o1.y <- <VSmain return value>.Tex.y; 
                //   o0.x <- <VSmain return value>.pos.x; o0.y <- <VSmain return value>.pos.y; o0.z <- <VSmain return value>.pos.z; o0.w <- <VSmain return value>.pos.w
                //
                #line 122 "E:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\ScreenQuad.fx"
                mov r0.x, v0.x
                mov r1.xyzw, cb0[r0.x + 0].xyzw  // r1.x <- output.pos.x; r1.y <- output.pos.y; r1.z <- output.pos.z; r1.w <- output.pos.w
                mov r0.xy, cb0[r0.x + 6].xyxx  // r0.x <- output.Tex.x; r0.y <- output.Tex.y
                mov o0.xyzw, r1.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 6 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbSettings
                // {
                //
                //   float gWeights[21];                // Offset:    0 Size:   324
                //      = 0x3c61653f 0x00000000 0x00000000 0x00000000 
                //        0x3c9aaec7 0x00000000 0x00000000 0x00000000 
                //        0x3ccd5944 0x00000000 0x00000000 0x00000000 
                //        0x3d03d623 0x00000000 0x00000000 0x00000000 
                //        0x3d23bb4f 0x00000000 0x00000000 0x00000000 
                //        0x3d44ad49 0x00000000 0x00000000 0x00000000 
                //        0x3d648186 0x00000000 0x00000000 0x00000000 
                //        0x3d806425 0x00000000 0x00000000 0x00000000 
                //        0x3d8b8c85 0x00000000 0x00000000 0x00000000 
                //        0x3d92b428 0x00000000 0x00000000 0x00000000 
                //        0x3d952b56 0x00000000 0x00000000 0x00000000 
                //        0x3d92b428 0x00000000 0x00000000 0x00000000 
                //        0x3d8b8c85 0x00000000 0x00000000 0x00000000 
                //        0x3d806425 0x00000000 0x00000000 0x00000000 
                //        0x3d648186 0x00000000 0x00000000 0x00000000 
                //        0x3d44ad49 0x00000000 0x00000000 0x00000000 
                //        0x3d23bb4f 0x00000000 0x00000000 0x00000000 
                //        0x3d03d623 0x00000000 0x00000000 0x00000000 
                //        0x3ccd5944 0x00000000 0x00000000 0x00000000 
                //        0x3c9aaec7 0x00000000 0x00000000 0x00000000 
                //        0x3c61653f 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gScreenMap                        texture  float4          2d    0        1
                // gSSAOMap                          texture  float4          2d    1        1
                // cbSettings                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[21], dynamicIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.pos.x; v0.y <- input.pos.y; v0.z <- input.pos.z; v0.w <- input.pos.w; 
                //   v1.x <- input.Tex.x; v1.y <- input.Tex.y; 
                //   o0.x <- <PSBlurmain return value>.x; o0.y <- <PSBlurmain return value>.y; o0.z <- <PSBlurmain return value>.z; o0.w <- <PSBlurmain return value>.w
                //
                #line 106 "E:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\ScreenQuad.fx"
                mov r0.x, l(10)  // r0.x <- gBlurRadius
                
                #line 219
                mov r0.yz, l(0,0.000781,0,0)  // r0.y <- texOffset.x; r0.z <- texOffset.y
                
                #line 222
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t1.xyzw, s0
                mul r1.xyzw, r1.xyzw, cb0[10].xxxx  // r1.x <- color.x; r1.y <- color.y; r1.z <- color.z; r1.w <- color.w
                mov r0.w, cb0[10].x  // r0.w <- totalWeight
                
                #line 235
                itof r2.x, l(-10)  // r2.x <- i
                mov r3.xyzw, r1.xyzw  // r3.x <- color.x; r3.y <- color.y; r3.z <- color.z; r3.w <- color.w
                mov r2.y, r0.w  // r2.y <- totalWeight
                mov r2.z, r2.x  // r2.z <- i
                loop 
                  itof r2.w, r0.x
                  ge r2.w, r2.w, r2.z
                  breakc_z r2.w
                
                #line 238
                  itof r2.w, l(0)
                  eq r4.x, r2.w, r2.z
                  if_nz r4.x
                    mov r2.w, r2.w  // r2.w <- i
                    add r2.z, r2.w, l(1.000000)  // r2.z <- i
                    continue 
                  endif 
                  mul r4.xy, r0.yzyy, r2.zzzz
                  add r4.xy, r4.xyxx, v1.xyxx  // r4.x <- tex.x; r4.y <- tex.y
                
                #line 255
                  itof r2.w, r0.x
                  add r2.w, r2.w, r2.z
                  ftou r2.w, r2.w
                  mov r2.w, cb0[r2.w + 0].x  // r2.w <- weight
                
                #line 258
                  sample_indexable(texture2d)(float,float,float,float) r4.xyzw, r4.xyxx, t1.xyzw, s0
                  mul r4.xyzw, r2.wwww, r4.xyzw
                  add r3.xyzw, r3.xyzw, r4.xyzw
                  add r2.y, r2.w, r2.y
                
                #line 235
                  add r2.z, r2.z, l(1.000000)
                
                #line 262
                endloop 
                
                #line 265
                div r0.xyzw, r3.xyzw, r2.yyyy  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w
                max r0.xyzw, r0.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
                min r0.xyzw, r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0
                mul o0.xyzw, r0.xyzw, r1.xyzw
                ret 
                // Approximately 38 instruction slots used
                            
            };
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NULL;
        }

    }

    technique11 VBlurTech
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbFixed
                // {
                //
                //   float4 vertexArray[6];             // Offset:    0 Size:    96
                //      = 0xbf800000 0xbf800000 0x00000000 0x3f800000 
                //        0xbf800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0x3f800000 0x00000000 0x3f800000 
                //        0x3f800000 0xbf800000 0x00000000 0x3f800000 
                //        0xbf800000 0xbf800000 0x00000000 0x3f800000 
                //   float2 uvArray[6];                 // Offset:   96 Size:    88
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 
                //   float4 OffsetVect[14];             // Offset:  192 Size:   224 [unused]
                //      = 0x3f800000 0x3f800000 0x3f800000 0x00000000 
                //        0xbf800000 0xbf800000 0xbf800000 0x00000000 
                //        0xbf800000 0x3f800000 0x3f800000 0x00000000 
                //        0x3f800000 0xbf800000 0xbf800000 0x00000000 
                //        0x3f800000 0x3f800000 0xbf800000 0x00000000 
                //        0xbf800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0x3f800000 0xbf800000 0x00000000 
                //        0x3f800000 0xbf800000 0x3f800000 0x00000000 
                //        0xbf800000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0xbf800000 0x00000000 0x00000000 
                //        0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0xbf800000 0x00000000 
                //        0x00000000 0x00000000 0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbFixed                           cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], dynamicIndexed
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vertexId; 
                //   o1.x <- <VSmain return value>.Tex.x; o1.y <- <VSmain return value>.Tex.y; 
                //   o0.x <- <VSmain return value>.pos.x; o0.y <- <VSmain return value>.pos.y; o0.z <- <VSmain return value>.pos.z; o0.w <- <VSmain return value>.pos.w
                //
                #line 122 "E:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\ScreenQuad.fx"
                mov r0.x, v0.x
                mov r1.xyzw, cb0[r0.x + 0].xyzw  // r1.x <- output.pos.x; r1.y <- output.pos.y; r1.z <- output.pos.z; r1.w <- output.pos.w
                mov r0.xy, cb0[r0.x + 6].xyxx  // r0.x <- output.Tex.x; r0.y <- output.Tex.y
                mov o0.xyzw, r1.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 6 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbSettings
                // {
                //
                //   float gWeights[21];                // Offset:    0 Size:   324
                //      = 0x3c61653f 0x00000000 0x00000000 0x00000000 
                //        0x3c9aaec7 0x00000000 0x00000000 0x00000000 
                //        0x3ccd5944 0x00000000 0x00000000 0x00000000 
                //        0x3d03d623 0x00000000 0x00000000 0x00000000 
                //        0x3d23bb4f 0x00000000 0x00000000 0x00000000 
                //        0x3d44ad49 0x00000000 0x00000000 0x00000000 
                //        0x3d648186 0x00000000 0x00000000 0x00000000 
                //        0x3d806425 0x00000000 0x00000000 0x00000000 
                //        0x3d8b8c85 0x00000000 0x00000000 0x00000000 
                //        0x3d92b428 0x00000000 0x00000000 0x00000000 
                //        0x3d952b56 0x00000000 0x00000000 0x00000000 
                //        0x3d92b428 0x00000000 0x00000000 0x00000000 
                //        0x3d8b8c85 0x00000000 0x00000000 0x00000000 
                //        0x3d806425 0x00000000 0x00000000 0x00000000 
                //        0x3d648186 0x00000000 0x00000000 0x00000000 
                //        0x3d44ad49 0x00000000 0x00000000 0x00000000 
                //        0x3d23bb4f 0x00000000 0x00000000 0x00000000 
                //        0x3d03d623 0x00000000 0x00000000 0x00000000 
                //        0x3ccd5944 0x00000000 0x00000000 0x00000000 
                //        0x3c9aaec7 0x00000000 0x00000000 0x00000000 
                //        0x3c61653f 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gSSAOMap                          texture  float4          2d    0        1
                // cbSettings                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[21], dynamicIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.pos.x; v0.y <- input.pos.y; v0.z <- input.pos.z; v0.w <- input.pos.w; 
                //   v1.x <- input.Tex.x; v1.y <- input.Tex.y; 
                //   o0.x <- <PSBlurmain return value>.x; o0.y <- <PSBlurmain return value>.y; o0.z <- <PSBlurmain return value>.z; o0.w <- <PSBlurmain return value>.w
                //
                #line 106 "E:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\ScreenQuad.fx"
                mov r0.x, l(10)  // r0.x <- gBlurRadius
                
                #line 219
                mov r0.yz, l(0,0,0.001389,0)  // r0.y <- texOffset.x; r0.z <- texOffset.y
                
                #line 222
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0
                mul r1.xyzw, r1.xyzw, cb0[10].xxxx  // r1.x <- color.x; r1.y <- color.y; r1.z <- color.z; r1.w <- color.w
                mov r0.w, cb0[10].x  // r0.w <- totalWeight
                
                #line 235
                itof r2.x, l(-10)  // r2.x <- i
                mov r3.xyzw, r1.xyzw  // r3.x <- color.x; r3.y <- color.y; r3.z <- color.z; r3.w <- color.w
                mov r2.y, r0.w  // r2.y <- totalWeight
                mov r2.z, r2.x  // r2.z <- i
                loop 
                  itof r2.w, r0.x
                  ge r2.w, r2.w, r2.z
                  breakc_z r2.w
                
                #line 238
                  itof r2.w, l(0)
                  eq r4.x, r2.w, r2.z
                  if_nz r4.x
                    mov r2.w, r2.w  // r2.w <- i
                    add r2.z, r2.w, l(1.000000)  // r2.z <- i
                    continue 
                  endif 
                  mul r4.xy, r0.yzyy, r2.zzzz
                  add r4.xy, r4.xyxx, v1.xyxx  // r4.x <- tex.x; r4.y <- tex.y
                
                #line 255
                  itof r2.w, r0.x
                  add r2.w, r2.w, r2.z
                  ftou r2.w, r2.w
                  mov r2.w, cb0[r2.w + 0].x  // r2.w <- weight
                
                #line 258
                  sample_indexable(texture2d)(float,float,float,float) r4.xyzw, r4.xyxx, t0.xyzw, s0
                  mul r4.xyzw, r2.wwww, r4.xyzw
                  add r3.xyzw, r3.xyzw, r4.xyzw
                  add r2.y, r2.w, r2.y
                
                #line 235
                  add r2.z, r2.z, l(1.000000)
                
                #line 262
                endloop 
                
                #line 265
                div r0.xyzw, r3.xyzw, r2.yyyy  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 35 instruction slots used
                            
            };
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NULL;
        }

    }

}

