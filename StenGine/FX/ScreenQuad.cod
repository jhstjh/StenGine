//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLight;         // Offset:    0, size:   32
    float3  gEyePosW;                   // Offset:   32, size:   12
}

//
// 6 local object(s)
//
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
Texture2D gScreenMap;
Texture2D gDiffuseGB;
Texture2D gPositionGB;
Texture2D gNormalGB;
Texture2D gSpecularGB;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 t0
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vertexId; 
                //   o1.x <- <VSmain return value>.Tex.x; o1.y <- <VSmain return value>.Tex.y; 
                //   o0.x <- <VSmain return value>.pos.x; o0.y <- <VSmain return value>.pos.y; o0.z <- <VSmain return value>.pos.z; o0.w <- <VSmain return value>.pos.w
                //
                #line 38 "D:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\ScreenQuad.fx"
                if_z v0.x
                  mov r0.xyzw, l(-1.000000,-1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                  itof r1.xy, l(0, 1, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                else 
                
                #line 38
                  mov r1.z, v0.x  // r1.z <- vertexId
                
                #line 42
                  mov r1.w, l(1)
                  ieq r1.w, r1.w, r1.z
                  if_nz r1.w
                    mov r0.xyzw, l(-1.000000,1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                    itof r1.xy, l(0, 0, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                  else 
                    mov r1.w, l(2)
                    ieq r1.w, r1.w, r1.z
                    if_nz r1.w
                      mov r0.xyzw, l(1.000000,1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                      itof r1.xy, l(1, 0, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                    else 
                      mov r1.w, l(3)
                      ieq r1.w, r1.w, r1.z
                      if_nz r1.w
                        mov r0.xyzw, l(1.000000,1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                        itof r1.xy, l(1, 0, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                
                #line 53
                      else 
                        mov r1.w, l(4)
                        ieq r1.w, r1.w, r1.z
                        if_nz r1.w
                          mov r0.xyzw, l(1.000000,-1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                          itof r1.xy, l(1, 1, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                        else 
                          mov r1.w, l(5)
                          ieq r1.z, r1.w, r1.z
                          if_nz r1.z
                            mov r0.xyzw, l(-1.000000,-1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                            itof r1.xy, l(0, 1, 0, 0)
                          endif   // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                        endif 
                      endif 
                    endif 
                  endif 
                endif 
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 43 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 intensity;              // Offset:    0
                //       float3 direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLight;                       // Offset:    0 Size:    32
                //   float3 gEyePosW;                   // Offset:   32 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseGB                        texture  float4          2d    0        1
                // gPositionGB                       texture  float4          2d    1        1
                // gNormalGB                         texture  float4          2d    2        1
                // gSpecularGB                       texture  float4          2d    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[3], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.pos.x; v0.y <- input.pos.y; v0.z <- input.pos.z; v0.w <- input.pos.w; 
                //   v1.x <- input.Tex.x; v1.y <- input.Tex.y; 
                //   o0.x <- <PSmain return value>.x; o0.y <- <PSmain return value>.y; o0.z <- <PSmain return value>.z; o0.w <- <PSmain return value>.w
                //
                #line 80 "D:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\ScreenQuad.fx"
                itof r0.xyzw, l(0, 0, 0, 0)  // r0.x <- diffColor.x; r0.y <- diffColor.y; r0.z <- diffColor.z; r0.w <- diffColor.w
                itof r1.xyzw, l(0, 0, 0, 0)  // r1.x <- specColor.x; r1.y <- specColor.y; r1.z <- specColor.z; r1.w <- specColor.w
                sample_indexable(texture2d)(float,float,float,float) r2.xyz, v1.xyxx, t2.xyzw, s0
                mov r2.xyz, r2.xyzx  // r2.x <- normalW.x; r2.y <- normalW.y; r2.z <- normalW.z
                mov r3.xyz, -cb0[1].xyzx
                dp3 r2.w, r3.xyzx, r2.xyzx  // r2.w <- diffuseK
                sample_indexable(texture2d)(float,float,float,float) r3.x, v1.xyxx, t0.wxyz, s0
                mov r3.x, r3.x  // r3.x <- shadowLit
                itof r3.y, l(0)
                lt r3.y, r3.y, r2.w
                if_nz r3.y
                  mul r4.xyzw, r2.wwww, cb0[0].xyzw
                  add r0.xyzw, r0.xyzw, r4.xyzw
                  dp3 r2.w, cb0[1].xyzx, r2.xyzx
                  add r2.w, r2.w, r2.w
                  mov r2.w, -r2.w
                  mul r2.xyz, r2.wwww, r2.xyzx
                  add r2.xyz, r2.xyzx, cb0[1].xyzx  // r2.x <- refLight.x; r2.y <- refLight.y; r2.z <- refLight.z
                  sample_indexable(texture2d)(float,float,float,float) r3.yzw, v1.xyxx, t1.wxyz, s0
                  mov r3.yzw, -r3.yyzw
                  add r3.yzw, r3.yyzw, cb0[2].xxyz  // r3.y <- viewRay.x; r3.z <- viewRay.y; r3.w <- viewRay.z
                
                #line 91
                  dp3 r2.w, r3.yzwy, r3.yzwy
                  rsq r2.w, r2.w
                  mul r3.yzw, r2.wwww, r3.yyzw
                  sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v1.xyxx, t3.xyzw, s0
                  dp3 r2.x, r2.xyzx, r3.yzwy
                  itof r2.y, l(0)
                  max r2.x, r2.y, r2.x
                  sample_indexable(texture2d)(float,float,float,float) r2.y, v1.xyxx, t3.xwyz, s0
                  log r2.x, r2.x
                  mul r2.x, r2.x, r2.y
                  exp r2.x, r2.x
                  mul r2.xyzw, r2.xxxx, r4.xyzw
                  add r1.xyzw, r1.xyzw, r2.xyzw
                endif 
                itof r2.w, l(0)
                mul r0.xyzw, r3.xxxx, r0.xyzw
                mov r2.xyz, l(0.200000,0.200000,0.200000,0)
                add r0.xyzw, r0.xyzw, r2.xyzw
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t0.xyzw, s0
                mul r0.xyzw, r0.xyzw, r2.xyzw
                mul r1.xyzw, r3.xxxx, r1.xyzw
                add o0.xyzw, r0.xyzw, r1.xyzw
                ret 
                // Approximately 44 instruction slots used
                            
            };
        }

    }

    technique11 DeferredLightingTech
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vertexId; 
                //   o1.x <- <VSmain return value>.Tex.x; o1.y <- <VSmain return value>.Tex.y; 
                //   o0.x <- <VSmain return value>.pos.x; o0.y <- <VSmain return value>.pos.y; o0.z <- <VSmain return value>.pos.z; o0.w <- <VSmain return value>.pos.w
                //
                #line 38 "D:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\ScreenQuad.fx"
                if_z v0.x
                  mov r0.xyzw, l(-1.000000,-1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                  itof r1.xy, l(0, 1, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                else 
                
                #line 38
                  mov r1.z, v0.x  // r1.z <- vertexId
                
                #line 42
                  mov r1.w, l(1)
                  ieq r1.w, r1.w, r1.z
                  if_nz r1.w
                    mov r0.xyzw, l(-1.000000,1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                    itof r1.xy, l(0, 0, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                  else 
                    mov r1.w, l(2)
                    ieq r1.w, r1.w, r1.z
                    if_nz r1.w
                      mov r0.xyzw, l(1.000000,1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                      itof r1.xy, l(1, 0, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                    else 
                      mov r1.w, l(3)
                      ieq r1.w, r1.w, r1.z
                      if_nz r1.w
                        mov r0.xyzw, l(1.000000,1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                        itof r1.xy, l(1, 0, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                
                #line 53
                      else 
                        mov r1.w, l(4)
                        ieq r1.w, r1.w, r1.z
                        if_nz r1.w
                          mov r0.xyzw, l(1.000000,-1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                          itof r1.xy, l(1, 1, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                        else 
                          mov r1.w, l(5)
                          ieq r1.z, r1.w, r1.z
                          if_nz r1.z
                            mov r0.xyzw, l(-1.000000,-1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                            itof r1.xy, l(0, 1, 0, 0)
                          endif   // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                        endif 
                      endif 
                    endif 
                  endif 
                endif 
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 43 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 intensity;              // Offset:    0
                //       float3 direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLight;                       // Offset:    0 Size:    32
                //   float3 gEyePosW;                   // Offset:   32 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseGB                        texture  float4          2d    0        1
                // gPositionGB                       texture  float4          2d    1        1
                // gNormalGB                         texture  float4          2d    2        1
                // gSpecularGB                       texture  float4          2d    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[3], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.pos.x; v0.y <- input.pos.y; v0.z <- input.pos.z; v0.w <- input.pos.w; 
                //   v1.x <- input.Tex.x; v1.y <- input.Tex.y; 
                //   o0.x <- <PSmain return value>.x; o0.y <- <PSmain return value>.y; o0.z <- <PSmain return value>.z; o0.w <- <PSmain return value>.w
                //
                #line 80 "D:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\ScreenQuad.fx"
                itof r0.xyzw, l(0, 0, 0, 0)  // r0.x <- diffColor.x; r0.y <- diffColor.y; r0.z <- diffColor.z; r0.w <- diffColor.w
                itof r1.xyzw, l(0, 0, 0, 0)  // r1.x <- specColor.x; r1.y <- specColor.y; r1.z <- specColor.z; r1.w <- specColor.w
                sample_indexable(texture2d)(float,float,float,float) r2.xyz, v1.xyxx, t2.xyzw, s0
                mov r2.xyz, r2.xyzx  // r2.x <- normalW.x; r2.y <- normalW.y; r2.z <- normalW.z
                mov r3.xyz, -cb0[1].xyzx
                dp3 r2.w, r3.xyzx, r2.xyzx  // r2.w <- diffuseK
                sample_indexable(texture2d)(float,float,float,float) r3.x, v1.xyxx, t0.wxyz, s0
                mov r3.x, r3.x  // r3.x <- shadowLit
                itof r3.y, l(0)
                lt r3.y, r3.y, r2.w
                if_nz r3.y
                  mul r4.xyzw, r2.wwww, cb0[0].xyzw
                  add r0.xyzw, r0.xyzw, r4.xyzw
                  dp3 r2.w, cb0[1].xyzx, r2.xyzx
                  add r2.w, r2.w, r2.w
                  mov r2.w, -r2.w
                  mul r2.xyz, r2.wwww, r2.xyzx
                  add r2.xyz, r2.xyzx, cb0[1].xyzx  // r2.x <- refLight.x; r2.y <- refLight.y; r2.z <- refLight.z
                  sample_indexable(texture2d)(float,float,float,float) r3.yzw, v1.xyxx, t1.wxyz, s0
                  mov r3.yzw, -r3.yyzw
                  add r3.yzw, r3.yyzw, cb0[2].xxyz  // r3.y <- viewRay.x; r3.z <- viewRay.y; r3.w <- viewRay.z
                
                #line 91
                  dp3 r2.w, r3.yzwy, r3.yzwy
                  rsq r2.w, r2.w
                  mul r3.yzw, r2.wwww, r3.yyzw
                  sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v1.xyxx, t3.xyzw, s0
                  dp3 r2.x, r2.xyzx, r3.yzwy
                  itof r2.y, l(0)
                  max r2.x, r2.y, r2.x
                  sample_indexable(texture2d)(float,float,float,float) r2.y, v1.xyxx, t3.xwyz, s0
                  log r2.x, r2.x
                  mul r2.x, r2.x, r2.y
                  exp r2.x, r2.x
                  mul r2.xyzw, r2.xxxx, r4.xyzw
                  add r1.xyzw, r1.xyzw, r2.xyzw
                endif 
                itof r2.w, l(0)
                mul r0.xyzw, r3.xxxx, r0.xyzw
                mov r2.xyz, l(0.200000,0.200000,0.200000,0)
                add r0.xyzw, r0.xyzw, r2.xyzw
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t0.xyzw, s0
                mul r0.xyzw, r0.xyzw, r2.xyzw
                mul r1.xyzw, r3.xxxx, r1.xyzw
                add o0.xyzw, r0.xyzw, r1.xyzw
                ret 
                // Approximately 44 instruction slots used
                            
            };
        }

    }

}

