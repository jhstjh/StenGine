//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLight;         // Offset:    0, size:   32
    float3  gEyePosW;                   // Offset:   32, size:   12
    float4x4 gProjInv;                  // Offset:   48, size:   64
}

//
// 7 local object(s)
//
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
Texture2D gScreenMap;
Texture2D gDiffuseGB;
Texture2D gPositionGB;
Texture2D gNormalGB;
Texture2D gSpecularGB;
Texture2D gDepthGB;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 t0
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vertexId; 
                //   o1.x <- <VSmain return value>.Tex.x; o1.y <- <VSmain return value>.Tex.y; 
                //   o0.x <- <VSmain return value>.pos.x; o0.y <- <VSmain return value>.pos.y; o0.z <- <VSmain return value>.pos.z; o0.w <- <VSmain return value>.pos.w
                //
                #line 40 "D:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\ScreenQuad.fx"
                if_z v0.x
                  mov r0.xyzw, l(-1.000000,-1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                  itof r1.xy, l(0, 1, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                else 
                
                #line 40
                  mov r1.z, v0.x  // r1.z <- vertexId
                
                #line 44
                  mov r1.w, l(1)
                  ieq r1.w, r1.w, r1.z
                  if_nz r1.w
                    mov r0.xyzw, l(-1.000000,1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                    itof r1.xy, l(0, 0, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                  else 
                    mov r1.w, l(2)
                    ieq r1.w, r1.w, r1.z
                    if_nz r1.w
                      mov r0.xyzw, l(1.000000,1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                      itof r1.xy, l(1, 0, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                    else 
                      mov r1.w, l(3)
                      ieq r1.w, r1.w, r1.z
                      if_nz r1.w
                        mov r0.xyzw, l(1.000000,1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                        itof r1.xy, l(1, 0, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                
                #line 55
                      else 
                        mov r1.w, l(4)
                        ieq r1.w, r1.w, r1.z
                        if_nz r1.w
                          mov r0.xyzw, l(1.000000,-1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                          itof r1.xy, l(1, 1, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                        else 
                          mov r1.w, l(5)
                          ieq r1.z, r1.w, r1.z
                          if_nz r1.z
                            mov r0.xyzw, l(-1.000000,-1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                            itof r1.xy, l(0, 1, 0, 0)
                          endif   // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                        endif 
                      endif 
                    endif 
                  endif 
                endif 
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 43 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 intensity;              // Offset:    0
                //       float3 direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLight;                       // Offset:    0 Size:    32
                //   float3 gEyePosW;                   // Offset:   32 Size:    12
                //   float4x4 gProjInv;                 // Offset:   48 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseGB                        texture  float4          2d    0        1
                // gNormalGB                         texture  float4          2d    1        1
                // gSpecularGB                       texture  float4          2d    2        1
                // gDepthGB                          texture  float4          2d    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.pos.x; v0.y <- input.pos.y; v0.z <- input.pos.z; v0.w <- input.pos.w; 
                //   v1.x <- input.Tex.x; v1.y <- input.Tex.y; 
                //   o0.x <- <PSmain return value>.x; o0.y <- <PSmain return value>.y; o0.z <- <PSmain return value>.z; o0.w <- <PSmain return value>.w
                //
                #line 80 "D:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\ScreenQuad.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t3.yzxw, s0
                mov r0.z, r0.z  // r0.z <- z
                itof r1.x, l(2)
                mul r1.x, r1.x, v1.x
                itof r1.y, l(1)
                mov r1.y, -r1.y
                add r0.x, r1.y, r1.x  // r0.x <- x
                itof r1.x, l(1)
                mov r1.y, -v1.y
                add r1.x, r1.y, r1.x
                itof r1.y, l(2)
                mul r1.x, r1.y, r1.x
                itof r1.y, l(1)
                mov r1.y, -r1.y
                add r0.y, r1.y, r1.x  // r0.y <- y
                mov r0.w, l(1.000000)
                mov r0.xyzw, r0.xyzw  // r0.x <- vProjectedPos.x; r0.y <- vProjectedPos.y; r0.z <- vProjectedPos.z; r0.w <- vProjectedPos.w
                dp4 r1.x, r0.xyzw, cb0[3].xyzw  // r1.x <- vPositionVS.x
                dp4 r1.y, r0.xyzw, cb0[4].xyzw  // r1.y <- vPositionVS.y
                dp4 r1.z, r0.xyzw, cb0[5].xyzw  // r1.z <- vPositionVS.z
                dp4 r0.x, r0.xyzw, cb0[6].xyzw  // r0.x <- vPositionVS.w
                div r0.xyz, r1.xyzx, r0.xxxx  // r0.x <- vPositionVS.x; r0.y <- vPositionVS.y; r0.z <- vPositionVS.z
                
                #line 93
                itof r0.w, l(1000)
                mov r1.x, -r0.z
                add r0.w, r0.w, r1.x
                itof r1.x, l(1)
                mov r1.x, -r1.x
                add r0.w, r0.w, r1.x
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 96
                itof r1.xyzw, l(0, 0, 0, 0)  // r1.x <- diffColor.x; r1.y <- diffColor.y; r1.z <- diffColor.z; r1.w <- diffColor.w
                itof r2.xyzw, l(0, 0, 0, 0)  // r2.x <- specColor.x; r2.y <- specColor.y; r2.z <- specColor.z; r2.w <- specColor.w
                
                #line 100
                sample_indexable(texture2d)(float,float,float,float) r3.xy, v1.xyxx, t1.xyzw, s0
                mov r3.xy, r3.xyxx  // r3.x <- normalV.x; r3.y <- normalV.y
                itof r0.w, l(1)
                dp2 r3.w, r3.xyxx, r3.xyxx
                mov r3.w, -r3.w
                add r0.w, r0.w, r3.w
                sqrt r0.w, r0.w
                mov r3.z, -r0.w  // r3.z <- normalV.z
                
                #line 105
                mov r4.xyz, -cb0[1].xyzx
                dp3 r0.w, r4.xyzx, r3.xyzx  // r0.w <- diffuseK
                sample_indexable(texture2d)(float,float,float,float) r3.w, v1.xyxx, t0.xyzw, s0
                mov r3.w, r3.w  // r3.w <- shadowLit
                itof r4.x, l(0)
                lt r4.x, r4.x, r0.w
                if_nz r4.x
                  mul r4.xyzw, r0.wwww, cb0[0].xyzw
                  add r1.xyzw, r1.xyzw, r4.xyzw
                  dp3 r0.w, cb0[1].xyzx, r3.xyzx
                  add r0.w, r0.w, r0.w
                  mov r0.w, -r0.w
                  mul r3.xyz, r0.wwww, r3.xyzx
                  add r3.xyz, r3.xyzx, cb0[1].xyzx  // r3.x <- refLight.x; r3.y <- refLight.y; r3.z <- refLight.z
                  mov r0.xyz, -r0.xyzx
                  add r0.xyz, r0.xyzx, cb0[2].xyzx  // r0.x <- viewRay.x; r0.y <- viewRay.y; r0.z <- viewRay.z
                  dp3 r0.w, r0.xyzx, r0.xyzx
                  rsq r0.w, r0.w
                  mul r0.xyz, r0.wwww, r0.xyzx
                  sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v1.xyxx, t2.xyzw, s0
                  dp3 r0.x, r3.xyzx, r0.xyzx
                  itof r0.y, l(0)
                  max r0.x, r0.y, r0.x
                  sample_indexable(texture2d)(float,float,float,float) r0.y, v1.xyxx, t2.xwyz, s0
                  log r0.x, r0.x
                  mul r0.x, r0.x, r0.y
                  exp r0.x, r0.x
                  mul r0.xyzw, r0.xxxx, r4.xyzw
                  add r2.xyzw, r0.xyzw, r2.xyzw
                endif 
                
                #line 116
                itof r0.w, l(0)
                mul r1.xyzw, r3.wwww, r1.xyzw
                mov r0.xyz, l(0.200000,0.200000,0.200000,0)
                add r0.xyzw, r0.xyzw, r1.xyzw
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0
                mul r0.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, r3.wwww, r2.xyzw
                add o0.xyzw, r0.xyzw, r1.xyzw
                ret 
                // Approximately 80 instruction slots used
                            
            };
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NULL;
        }

    }

    technique11 DeferredLightingTech
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vertexId; 
                //   o1.x <- <VSmain return value>.Tex.x; o1.y <- <VSmain return value>.Tex.y; 
                //   o0.x <- <VSmain return value>.pos.x; o0.y <- <VSmain return value>.pos.y; o0.z <- <VSmain return value>.pos.z; o0.w <- <VSmain return value>.pos.w
                //
                #line 40 "D:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\ScreenQuad.fx"
                if_z v0.x
                  mov r0.xyzw, l(-1.000000,-1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                  itof r1.xy, l(0, 1, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                else 
                
                #line 40
                  mov r1.z, v0.x  // r1.z <- vertexId
                
                #line 44
                  mov r1.w, l(1)
                  ieq r1.w, r1.w, r1.z
                  if_nz r1.w
                    mov r0.xyzw, l(-1.000000,1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                    itof r1.xy, l(0, 0, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                  else 
                    mov r1.w, l(2)
                    ieq r1.w, r1.w, r1.z
                    if_nz r1.w
                      mov r0.xyzw, l(1.000000,1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                      itof r1.xy, l(1, 0, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                    else 
                      mov r1.w, l(3)
                      ieq r1.w, r1.w, r1.z
                      if_nz r1.w
                        mov r0.xyzw, l(1.000000,1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                        itof r1.xy, l(1, 0, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                
                #line 55
                      else 
                        mov r1.w, l(4)
                        ieq r1.w, r1.w, r1.z
                        if_nz r1.w
                          mov r0.xyzw, l(1.000000,-1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                          itof r1.xy, l(1, 1, 0, 0)  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                        else 
                          mov r1.w, l(5)
                          ieq r1.z, r1.w, r1.z
                          if_nz r1.z
                            mov r0.xyzw, l(-1.000000,-1.000000,0,1.000000)  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z; r0.w <- output.pos.w
                            itof r1.xy, l(0, 1, 0, 0)
                          endif   // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                        endif 
                      endif 
                    endif 
                  endif 
                endif 
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 43 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 intensity;              // Offset:    0
                //       float3 direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLight;                       // Offset:    0 Size:    32
                //   float3 gEyePosW;                   // Offset:   32 Size:    12
                //   float4x4 gProjInv;                 // Offset:   48 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseGB                        texture  float4          2d    0        1
                // gNormalGB                         texture  float4          2d    1        1
                // gSpecularGB                       texture  float4          2d    2        1
                // gDepthGB                          texture  float4          2d    3        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.pos.x; v0.y <- input.pos.y; v0.z <- input.pos.z; v0.w <- input.pos.w; 
                //   v1.x <- input.Tex.x; v1.y <- input.Tex.y; 
                //   o0.x <- <PSmain return value>.x; o0.y <- <PSmain return value>.y; o0.z <- <PSmain return value>.z; o0.w <- <PSmain return value>.w
                //
                #line 80 "D:\Documents\Visual Studio 2013\Projects\StenGine\StenGine\FX\ScreenQuad.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t3.yzxw, s0
                mov r0.z, r0.z  // r0.z <- z
                itof r1.x, l(2)
                mul r1.x, r1.x, v1.x
                itof r1.y, l(1)
                mov r1.y, -r1.y
                add r0.x, r1.y, r1.x  // r0.x <- x
                itof r1.x, l(1)
                mov r1.y, -v1.y
                add r1.x, r1.y, r1.x
                itof r1.y, l(2)
                mul r1.x, r1.y, r1.x
                itof r1.y, l(1)
                mov r1.y, -r1.y
                add r0.y, r1.y, r1.x  // r0.y <- y
                mov r0.w, l(1.000000)
                mov r0.xyzw, r0.xyzw  // r0.x <- vProjectedPos.x; r0.y <- vProjectedPos.y; r0.z <- vProjectedPos.z; r0.w <- vProjectedPos.w
                dp4 r1.x, r0.xyzw, cb0[3].xyzw  // r1.x <- vPositionVS.x
                dp4 r1.y, r0.xyzw, cb0[4].xyzw  // r1.y <- vPositionVS.y
                dp4 r1.z, r0.xyzw, cb0[5].xyzw  // r1.z <- vPositionVS.z
                dp4 r0.x, r0.xyzw, cb0[6].xyzw  // r0.x <- vPositionVS.w
                div r0.xyz, r1.xyzx, r0.xxxx  // r0.x <- vPositionVS.x; r0.y <- vPositionVS.y; r0.z <- vPositionVS.z
                
                #line 93
                itof r0.w, l(1000)
                mov r1.x, -r0.z
                add r0.w, r0.w, r1.x
                itof r1.x, l(1)
                mov r1.x, -r1.x
                add r0.w, r0.w, r1.x
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 96
                itof r1.xyzw, l(0, 0, 0, 0)  // r1.x <- diffColor.x; r1.y <- diffColor.y; r1.z <- diffColor.z; r1.w <- diffColor.w
                itof r2.xyzw, l(0, 0, 0, 0)  // r2.x <- specColor.x; r2.y <- specColor.y; r2.z <- specColor.z; r2.w <- specColor.w
                
                #line 100
                sample_indexable(texture2d)(float,float,float,float) r3.xy, v1.xyxx, t1.xyzw, s0
                mov r3.xy, r3.xyxx  // r3.x <- normalV.x; r3.y <- normalV.y
                itof r0.w, l(1)
                dp2 r3.w, r3.xyxx, r3.xyxx
                mov r3.w, -r3.w
                add r0.w, r0.w, r3.w
                sqrt r0.w, r0.w
                mov r3.z, -r0.w  // r3.z <- normalV.z
                
                #line 105
                mov r4.xyz, -cb0[1].xyzx
                dp3 r0.w, r4.xyzx, r3.xyzx  // r0.w <- diffuseK
                sample_indexable(texture2d)(float,float,float,float) r3.w, v1.xyxx, t0.xyzw, s0
                mov r3.w, r3.w  // r3.w <- shadowLit
                itof r4.x, l(0)
                lt r4.x, r4.x, r0.w
                if_nz r4.x
                  mul r4.xyzw, r0.wwww, cb0[0].xyzw
                  add r1.xyzw, r1.xyzw, r4.xyzw
                  dp3 r0.w, cb0[1].xyzx, r3.xyzx
                  add r0.w, r0.w, r0.w
                  mov r0.w, -r0.w
                  mul r3.xyz, r0.wwww, r3.xyzx
                  add r3.xyz, r3.xyzx, cb0[1].xyzx  // r3.x <- refLight.x; r3.y <- refLight.y; r3.z <- refLight.z
                  mov r0.xyz, -r0.xyzx
                  add r0.xyz, r0.xyzx, cb0[2].xyzx  // r0.x <- viewRay.x; r0.y <- viewRay.y; r0.z <- viewRay.z
                  dp3 r0.w, r0.xyzx, r0.xyzx
                  rsq r0.w, r0.w
                  mul r0.xyz, r0.wwww, r0.xyzx
                  sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v1.xyxx, t2.xyzw, s0
                  dp3 r0.x, r3.xyzx, r0.xyzx
                  itof r0.y, l(0)
                  max r0.x, r0.y, r0.x
                  sample_indexable(texture2d)(float,float,float,float) r0.y, v1.xyxx, t2.xwyz, s0
                  log r0.x, r0.x
                  mul r0.x, r0.x, r0.y
                  exp r0.x, r0.x
                  mul r0.xyzw, r0.xxxx, r4.xyzw
                  add r2.xyzw, r0.xyzw, r2.xyzw
                endif 
                
                #line 116
                itof r0.w, l(0)
                mul r1.xyzw, r3.wwww, r1.xyzw
                mov r0.xyz, l(0.200000,0.200000,0.200000,0)
                add r0.xyzw, r0.xyzw, r1.xyzw
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0
                mul r0.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, r3.wwww, r2.xyzw
                add o0.xyzw, r0.xyzw, r1.xyzw
                ret 
                // Approximately 80 instruction slots used
                            
            };
        }

    }

}

